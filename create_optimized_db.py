import json
import shutil
from datetime import datetime

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
shutil.copy('knowledge_base.json', 'knowledge_base_backup.json')
print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: knowledge_base_backup.json")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –±–∞–∑—É
with open('knowledge_base.json', 'r', encoding='utf-8') as f:
    all_products = json.load(f)

print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø-30 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è core –±–∞–∑—ã
# –ö—Ä–∏—Ç–µ—Ä–∏–∏: –≤–∞–∂–Ω—ã–µ –ª–∏–Ω–µ–π–∫–∏ + –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
core_product_ids = [
    # –õ–∏–Ω–µ–π–∫–∞ –†—É–º–∞—Ä–∏–Ω (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    'roomarine_extra', 'roomarine_calcium', 'roomarine_chitosan',
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã
    'solberry_h', 'beeteron_h', 'orange_day', 'orange_tabs', 'orangemu',
    
    # –í–∞–∂–Ω—ã–µ –ë–ê–î—ã –∏ –≤–∏—Ç–∞–º–∏–Ω—ã
    'selen_tabs', 'mg_evening', 'royal_jelly', 'omega3_fish_oil',
    'multi_zink_mussels', 'ognevitt',
    
    # –°–æ—Ä–±–µ–Ω—Ç—ã –∏ –¥–µ—Ç–æ–∫—Å
    'profibex', 'argent_max',
    
    # –ú—É–∂—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    'aspen_extra', 'prostosin', 'bars_1',
    
    # –ù–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    'serotonin_drops',
    
    # –ü–µ–ø—Ç–∏–¥—ã –∏ –∫—Ä–∞—Å–æ—Ç–∞
    'foam_washing', 'peptide_complex',
    
    # –¢—Ä–∞–≤—ã –∏ –Ω–∞—Å—Ç–æ–∏
    'propolux', 'propolux_tabs',
    
    # –õ–µ—Ü–∏—Ç–∏–Ω
    'lecithin_vanilla', 'lecithin_tube_f',
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞–∂–Ω—ã–µ
    'bwl_extra_caps', 'alfalfa_extra_tabs', 'mg_plus', 'mg_tabs'
]

# –°–æ–∑–¥–∞–µ–º core –±–∞–∑—É
core_products = []
core_ids_found = []

for product in all_products:
    if product['id'] in core_product_ids:
        core_products.append(product)
        core_ids_found.append(product['id'])

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞—à–ª–∏—Å—å –ø–æ ID, –Ω–æ –≤–∞–∂–Ω—ã
missing_core_ids = set(core_product_ids) - set(core_ids_found)
if missing_core_ids:
    print(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç—ã —Å ID: {missing_core_ids}")

# –ï—Å–ª–∏ core –ø–æ–ª—É—á–∏–ª—Å—è –º–µ–Ω—å—à–µ 25 –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ
if len(core_products) < 25:
    remaining_products = [p for p in all_products if p['id'] not in core_ids_found]
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    priority_categories = ['–ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã', '–†—É–º–∞—Ä–∏–Ω—ã –∏ –ë–ê–†–°—ã (–ó+–ê)', '–°–æ—Ä–±–µ–Ω—Ç—ã', '–ö—Ä–∞—Å–æ—Ç–∞ / –£—Ö–æ–¥ –∑–∞ —Ç–µ–ª–æ–º']
    
    for category in priority_categories:
        for product in remaining_products:
            if len(core_products) >= 30:
                break
            if product.get('category') == category and product not in core_products:
                core_products.append(product)

# –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
if len(core_products) < 30:
    remaining = [p for p in all_products if p not in core_products]
    core_products.extend(remaining[:30-len(core_products)])

# –°–æ—Ö—Ä–∞–Ω—è–µ–º core –±–∞–∑—É
with open('knowledge_base_core.json', 'w', encoding='utf-8') as f:
    json.dump(core_products, f, ensure_ascii=False, indent=2)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º full –±–∞–∑—É (—ç—Ç–æ —Ç–∞ –∂–µ –ø–æ–ª–Ω–∞—è –±–∞–∑–∞)
with open('knowledge_base_full.json', 'w', encoding='utf-8') as f:
    json.dump(all_products, f, ensure_ascii=False, indent=2)

print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
print(f"üìÅ knowledge_base_core.json - {len(core_products)} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
print(f"üìÅ knowledge_base_full.json - {len(all_products)} –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
print(f"üìÅ knowledge_base_backup.json - —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")

print(f"\nüî• CORE –ë–ê–ó–ê ({len(core_products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤):")
print("=" * 60)
for i, product in enumerate(core_products, 1):
    category = product.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    print(f"{i:2d}. {product['product']}")
    print(f"    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")

print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ CORE:")
category_stats = {}
for product in core_products:
    cat = product.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    category_stats[cat] = category_stats.get(cat, 0) + 1

for cat, count in sorted(category_stats.items(), key=lambda x: x[1], reverse=True):
    print(f"  {cat}: {count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

print(f"\nüíæ –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:")
import os
core_size = os.path.getsize('knowledge_base_core.json') // 1024
full_size = os.path.getsize('knowledge_base_full.json') // 1024
print(f"  Core: {core_size} KB")
print(f"  Full: {full_size} KB") 
print(f"  –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏: ~{full_size//core_size}x")

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
db_info = {
    "created": datetime.now().isoformat(),
    "structure": {
        "core": {
            "file": "knowledge_base_core.json",
            "products_count": len(core_products),
            "description": "–¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
            "size_kb": core_size
        },
        "full": {
            "file": "knowledge_base_full.json", 
            "products_count": len(all_products),
            "description": "–ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
            "size_kb": full_size
        },
        "backup": {
            "file": "knowledge_base_backup.json",
            "description": "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è"
        }
    },
    "usage": {
        "bot_logic": "1. –ü–æ–∏—Å–∫ –≤ core ‚Üí 2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∏—Å–∫ –≤ full",
        "update_procedure": "–û–±–Ω–æ–≤–ª—è—Ç—å core, full –∏ backup –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
    }
}

with open('database_info.json', 'w', encoding='utf-8') as f:
    json.dump(db_info, f, ensure_ascii=False, indent=2)

print(f"\nüìã –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª database_info.json —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
print(f"\nüöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")






