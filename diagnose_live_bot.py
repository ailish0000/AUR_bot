# diagnose_live_bot.py
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
"""
import json
import os
from datetime import datetime

def check_knowledge_base_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
    print("=" * 30)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        kb_path = "knowledge_base.json"
        if os.path.exists(kb_path):
            mod_time = os.path.getmtime(kb_path)
            mod_datetime = datetime.fromtimestamp(mod_time)
            print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {mod_datetime}")
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(kb_path, "r", encoding="utf-8") as f:
                data = json.load(f)
            
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(data)}")
            
            for product in data:
                image_id = product.get('image_id', '')
                print(f"   {product['product']}: {'‚úÖ –ï—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞' if image_id else '‚ùå –ù–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏'}")
                
        else:
            print("‚ùå –§–∞–π–ª knowledge_base.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")

def check_bot_modules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –±–æ—Ç–∞"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞")
    print("=" * 25)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        modules_to_check = [
            "product_recommendations",
            "enhanced_vector_db", 
            "enhanced_llm",
            "nlp_processor"
        ]
        
        for module_name in modules_to_check:
            try:
                module = __import__(module_name)
                print(f"‚úÖ {module_name}: –ó–∞–≥—Ä—É–∂–µ–Ω")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è product_recommendations
                if module_name == "product_recommendations":
                    manager = getattr(module, 'recommendation_manager', None)
                    if manager:
                        products_count = len(manager.products_data)
                        print(f"   üìä –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ: {products_count}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ image_id
                        for pid, pdata in manager.products_data.items():
                            image_id = pdata.get('image_id', '')
                            print(f"   {pid}: {'‚úÖ Image ID' if image_id else '‚ùå –ù–µ—Ç Image ID'}")
                
            except ImportError as e:
                print(f"‚ùå {module_name}: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª–µ–π: {e}")

def suggest_solution():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    print("\nüí° –î–ò–ê–ì–ù–û–ó –ò –†–ï–®–ï–ù–ò–ï")
    print("=" * 25)
    
    print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫:")
    print("1. –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –∫–æ–¥–∞ (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω)")
    print("2. –ú–æ–¥—É–ª—å product_recommendations –∫—ç—à–∏—Ä–æ–≤–∞–Ω –≤ –ø–∞–º—è—Ç–∏")
    print("3. –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–ª–∞—Å—å")
    print("4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ª–æ–≥–∏–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç–µ")
    
    print("\nüîß –†–ï–®–ï–ù–ò–Ø:")
    print("1. ‚ö° –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–ï –ë–û–¢–ê: Ctrl+C –∏ —Å–Ω–æ–≤–∞ python bot.py")
    print("2. üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è: —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    print("3. üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Telegram: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É '–ß—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ—Å—Ç—É–¥–µ?'")
    print("4. üß™ –¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("\nüéØ –ì–õ–ê–í–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
    print("   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!")
    print("   –ö–æ–º–∞–Ω–¥—ã:")
    print("   1. Ctrl+C (–≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Å –±–æ—Ç–æ–º)")
    print("   2. python bot.py")

def create_test_message():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("\nüìù –¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï")
    print("=" * 20)
    print("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É: '–ß—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ—Å—Ç—É–¥–µ?'")
    print("–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("üì∑ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –°–æ–ª–±–µ—Ä—Ä–∏-H")
    print("üíä **–°–æ–ª–±–µ—Ä—Ä–∏-H (Solberry-H)**")
    print("üéØ **–ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç:** –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –ø—Ä–æ—Å—Ç—É–¥–∞—Ö...")
    print("[üõí –ó–∞–∫–∞–∑–∞—Ç—å] [–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂Ô∏è]")

if __name__ == "__main__":
    print("ü©∫ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ö–ê–†–¢–ò–ù–ö–ê–ú–ò")
    print("=" * 45)
    
    check_knowledge_base_status()
    check_bot_modules()  
    suggest_solution()
    create_test_message()







