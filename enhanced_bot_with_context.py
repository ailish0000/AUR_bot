"""
üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π Aurora Bot —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
"""

import asyncio
from typing import Dict, List, Optional, Any
from contextual_bot_integration import contextual_integration
from enhanced_llm import EnhancedLLM
from nlp_processor import NLPProcessor, Intent
import logging

logger = logging.getLogger(__name__)

class EnhancedAuroraBot:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π Aurora Bot —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self):
        self.llm = EnhancedLLM()
        self.nlp = NLPProcessor()
        self.context_system = contextual_integration
        
        logger.info("üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π Aurora Bot —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def handle_user_message(self, user_id: str, message: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            intent = self.nlp.analyze_intent(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            context_result = self.context_system.process_user_message(user_id, message, intent.name)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            contextual_prompt = context_result.get('contextual_prompt', message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            if context_result.get('should_ask_clarifying_question', False):
                clarifying_response = await self._generate_clarifying_question(user_id, context_result)
                return {
                    'response': clarifying_response,
                    'type': 'clarification',
                    'context_info': context_result
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            base_response = await self.llm.process_query(contextual_prompt, intent)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º—è–Ω—É—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            found_products = self.llm._extract_products_from_response(base_response)
            
            # –£–ª—É—á—à–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            enhancement_result = self.context_system.enhance_bot_response(
                user_id, base_response, found_products
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            final_response = self._format_contextual_response(
                enhancement_result, context_result
            )
            
            return {
                'response': final_response,
                'type': 'contextual_recommendation',
                'products': found_products,
                'personalized_recommendations': enhancement_result.get('personalized_recommendations', []),
                'follow_up_suggestions': enhancement_result.get('follow_up_suggestions', []),
                'conversation_momentum': enhancement_result.get('conversation_momentum', 'medium'),
                'context_info': context_result
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return await self._fallback_response(message)
    
    async def handle_product_selection(self, user_id: str, selection: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            selection_result = self.context_system.handle_product_selection(user_id, selection)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
            product_info_response = await self._generate_product_info_response(
                selection, selection_result
            )
            
            return {
                'response': product_info_response,
                'type': 'product_selection',
                'selected_product': selection,
                'next_actions': selection_result.get('next_actions', []),
                'should_offer_synergy': selection_result.get('should_offer_synergy', False)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return {
                'response': f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ {selection}",
                'type': 'product_selection',
                'selected_product': selection
            }
    
    async def handle_link_request(self, user_id: str, product_name: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç"""
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            link_result = self.context_system.handle_link_request(user_id, product_name)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
            link_response = await self._generate_link_response(product_name, link_result)
            
            return {
                'response': link_response,
                'type': 'product_link',
                'product': product_name,
                'high_purchase_intent': link_result.get('high_purchase_intent', False),
                'follow_up_actions': link_result.get('follow_up_actions', [])
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å—Å—ã–ª–∫–∏: {e}")
            return {
                'response': f"–°—Å—ã–ª–∫–∞ –Ω–∞ {product_name}",
                'type': 'product_link',
                'product': product_name
            }
    
    async def get_conversation_insights(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        
        return self.context_system.get_conversation_summary(user_id)
    
    async def _generate_clarifying_question(self, user_id: str, context_result: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        
        guidance = context_result.get('conversation_guidance', {})
        recommended_action = guidance.get('recommended_action', {})
        
        question = recommended_action.get('content', 
                                        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö, —á—Ç–æ–±—ã —è –º–æ–≥ –¥–∞—Ç—å –ª—É—á—à–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ
        user_insights = context_result.get('user_insights', {})
        if user_insights.get('is_returning_user', False):
            question = f"–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! {question}"
        
        return question
    
    async def _generate_product_info_response(self, product: str, selection_result: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ"""
        
        base_response = f"üåø {product}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        base_response += "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –≠—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è.\n\n"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        next_actions = selection_result.get('next_actions', [])
        if next_actions:
            base_response += "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:\n"
            for i, action in enumerate(next_actions, 1):
                base_response += f"{i}. {action}\n"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∏–Ω–µ—Ä–≥–∏—é
        if selection_result.get('should_offer_synergy', False):
            base_response += "\nüí° –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è —Å —ç—Ç–∏–º –≤—ã–±–æ—Ä–æ–º."
        
        return base_response
    
    async def _generate_link_response(self, product: str, link_result: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —Å—Å—ã–ª–∫–æ–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"""
        
        response = f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ {product}:\n[–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞]\n\n"
        
        if link_result.get('high_purchase_intent', False):
            response += "üéØ –í–∏–∂—É, —á—Ç–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–∫—É–ø–∫–µ!\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        follow_up = link_result.get('follow_up_actions', [])
        if follow_up:
            response += "–¢–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n"
            for action in follow_up:
                response += f"‚Ä¢ {action}\n"
        
        return response
    
    def _format_contextual_response(self, enhancement_result: Dict, context_result: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π –æ—Ç–≤–µ—Ç"""
        
        base_response = enhancement_result.get('enhanced_response', '')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        suggestions = enhancement_result.get('follow_up_suggestions', [])
        if suggestions:
            base_response += "\n\n" + suggestions[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        personalization_level = context_result.get('personalization_level', 'basic')
        if personalization_level == 'high':
            base_response += "\n\nüéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞*"
        
        return base_response
    
    async def _fallback_response(self, message: str) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π LLM –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            basic_response = await self.llm.process_query(message, Intent.GENERAL_QUESTION)
            
            return {
                'response': basic_response,
                'type': 'basic_response',
                'products': [],
                'context_info': {}
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                'response': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑.",
                'type': 'error',
                'products': [],
                'context_info': {}
            }

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def demo_contextual_bot():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    bot = EnhancedAuroraBot()
    user_id = "demo_user_123"
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ Aurora Bot")
    print("=" * 60)
    
    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ú–Ω–µ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥–ª—è –ø–µ—á–µ–Ω–∏")
    result1 = await bot.handle_user_message(user_id, "–ú–Ω–µ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥–ª—è –ø–µ—á–µ–Ω–∏")
    print(f"ü§ñ –ë–æ—Ç: {result1['response']}")
    print(f"üìä –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {result1['type']}")
    print()
    
    # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞)
    print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ê —á—Ç–æ –ª—É—á—à–µ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å —ç—Ç–∏–º?")
    result2 = await bot.handle_user_message(user_id, "–ê —á—Ç–æ –ª—É—á—à–µ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å —ç—Ç–∏–º?")
    print(f"ü§ñ –ë–æ—Ç: {result2['response']}")
    print(f"üìä –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {result2['type']}")
    print()
    
    # –í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
    print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: 1")
    result3 = await bot.handle_product_selection(user_id, "–°–∏–ª–∏—Ü–∏—Ç–∏–Ω")
    print(f"ü§ñ –ë–æ—Ç: {result3['response']}")
    print()
    
    # –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏
    print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É")
    result4 = await bot.handle_link_request(user_id, "–°–∏–ª–∏—Ü–∏—Ç–∏–Ω")
    print(f"ü§ñ –ë–æ—Ç: {result4['response']}")
    print()
    
    # –ò–Ω—Å–∞–π—Ç—ã –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
    insights = await bot.get_conversation_insights(user_id)
    print("üìà –ò–Ω—Å–∞–π—Ç—ã –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ:")
    print(f"   –û–±—Å—É–∂–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {insights.get('recommendation_summary', {}).get('total_products_discussed', 0)}")
    print(f"   –°—Ç–∞–¥–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {insights.get('recommendation_summary', {}).get('conversation_stage', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"   –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ: {insights.get('recommendation_summary', {}).get('purchase_readiness', 0):.2f}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.run(demo_contextual_bot())

