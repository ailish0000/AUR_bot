"""
üîÑ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è Aurora Bot
–£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –≤–µ–¥–µ–Ω–∏—è –±–µ—Å–µ–¥—ã, –∑–∞–¥–∞–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫ —Ü–µ–ª–∏
"""

from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from conversation_memory import conversation_memory, ConversationMessage
from context_analyzer import context_analyzer
from personalized_recommendations import recommendation_engine
import logging

logger = logging.getLogger(__name__)

@dataclass
class ConversationAction:
    """–î–µ–π—Å—Ç–≤–∏–µ –≤ —Ä–∞–º–∫–∞—Ö –¥–∏–∞–ª–æ–≥–∞"""
    action_type: str  # 'ask_question', 'provide_recommendation', 'clarify_need', 'summarize'
    content: str
    priority: int  # 1-5, –≥–¥–µ 1 - –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    reasoning: str
    expected_outcome: str

@dataclass
class DialogueState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
    current_goal: str  # 'product_discovery', 'comparison', 'purchase_decision', 'information_gathering'
    information_gaps: List[str]  # –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å
    confidence_level: float  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
    next_logical_step: str
    conversation_momentum: str  # 'building', 'maintained', 'declining'

class ConversationFlowManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ç–æ–∫–∞ –¥–∏–∞–ª–æ–≥–∞"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        self.goal_patterns = {
            'product_discovery': [
                '—á—Ç–æ –ª—É—á—à–µ', '–ø–æ—Å–æ–≤–µ—Ç—É–π', '—Ä–µ–∫–æ–º–µ–Ω–¥—É–π', '–ø–æ–¥—Ö–æ–¥–∏—Ç', '–Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ'
            ],
            'comparison': [
                '—Å—Ä–∞–≤–Ω–∏', '—Ä–∞–∑–Ω–∏—Ü–∞', '–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è', '–ª—É—á—à–µ –∏–∑', '–∫–∞–∫–æ–π –≤—ã–±—Ä–∞—Ç—å'
            ],
            'purchase_decision': [
                '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Å—Å—ã–ª–∫–∞', '—Ü–µ–Ω–∞', '–≥–¥–µ –∫—É–ø–∏—Ç—å', '–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å'
            ],
            'information_gathering': [
                '–∫–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—Ç—å', '—Å–æ—Å—Ç–∞–≤', '–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è', '—ç—Ñ—Ñ–µ–∫—Ç', '–¥–µ–π—Å—Ç–≤–∏–µ'
            ]
        }
        
        # –®–∞–±–ª–æ–Ω—ã —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
        self.clarification_templates = {
            'health_focus': [
                "–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã —É—Ç–æ—á–Ω–∏—Ç—å, –∫–∞–∫–∞—è –æ–±–ª–∞—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å—è –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
                "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —Ü–µ–ª–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è?",
                "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–ª—É—á—à–∏—Ç—å –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–≤–æ–µ–º –æ—Ä–≥–∞–Ω–∏–∑–º–µ?"
            ],
            'usage_context': [
                "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —ç—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏ –∏–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞?",
                "–≠—Ç–æ –¥–ª—è –≤–∞—Å –ª–∏—á–Ω–æ –∏–ª–∏ –¥–ª—è –∫–æ–≥–æ-—Ç–æ –∏–∑ –±–ª–∏–∑–∫–∏—Ö?",
                "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –ø—Ä–∏–µ–º–∞ –ø–æ–¥–æ–±–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤?"
            ],
            'product_preference': [
                "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–ª–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ–±–∞–≤–∫–∏?",
                "–í–∞–∂–Ω–∞ –ª–∏ –¥–ª—è –≤–∞—Å —Ñ–æ—Ä–º–∞ –≤—ã–ø—É—Å–∫–∞ (–∫–∞–ø—Å—É–ª—ã, —Ç–∞–±–ª–µ—Ç–∫–∏, –ø–æ—Ä–æ—à–æ–∫)?",
                "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É?"
            ],
            'synergy_interest': [
                "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ª–∏ –≤—ã —É–∂–µ –∫–∞–∫–∏–µ-—Ç–æ –¥–æ–±–∞–≤–∫–∏ –∏–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞?",
                "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ª–∏ –≤–∞—Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã?",
                "–•–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –æ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤?"
            ]
        }
    
    def analyze_conversation_flow(self, user_id: str, new_message: str) -> DialogueState:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–∏–∞–ª–æ–≥–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        context = context_analyzer.analyze_conversation_context(user_id)
        recent_messages = conversation_memory.get_recent_messages(user_id, limit=5)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
        current_goal = self._identify_conversation_goal(new_message, recent_messages)
        
        # –í—ã—è–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        information_gaps = self._identify_information_gaps(user_id, current_goal, context)
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
        confidence_level = self._calculate_understanding_confidence(context, information_gaps)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥–∏—á–µ—Å–∫–∏–π —à–∞–≥
        next_step = self._determine_next_step(current_goal, information_gaps, confidence_level)
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –º–æ–º–µ–Ω—Ç—É–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        momentum = self._assess_conversation_momentum(recent_messages)
        
        return DialogueState(
            current_goal=current_goal,
            information_gaps=information_gaps,
            confidence_level=confidence_level,
            next_logical_step=next_step,
            conversation_momentum=momentum
        )
    
    def generate_conversation_actions(self, user_id: str, dialogue_state: DialogueState) -> List[ConversationAction]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        
        actions = []
        
        # –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        if dialogue_state.information_gaps and dialogue_state.confidence_level < 0.7:
            actions.extend(self._generate_clarification_actions(dialogue_state.information_gaps))
        
        # –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        if dialogue_state.current_goal == 'product_discovery':
            actions.extend(self._generate_discovery_actions(user_id, dialogue_state))
        elif dialogue_state.current_goal == 'comparison':
            actions.extend(self._generate_comparison_actions(user_id, dialogue_state))
        elif dialogue_state.current_goal == 'purchase_decision':
            actions.extend(self._generate_purchase_actions(user_id, dialogue_state))
        elif dialogue_state.current_goal == 'information_gathering':
            actions.extend(self._generate_information_actions(user_id, dialogue_state))
        
        # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º–æ–º–µ–Ω—Ç—É–º–∞
        if dialogue_state.conversation_momentum == 'declining':
            actions.extend(self._generate_engagement_actions(user_id))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        actions.sort(key=lambda x: x.priority)
        
        return actions[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3 –¥–µ–π—Å—Ç–≤–∏—è
    
    def _identify_conversation_goal(self, message: str, recent_messages: List[ConversationMessage]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        
        message_lower = message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        for goal, patterns in self.goal_patterns.items():
            if any(pattern in message_lower for pattern in patterns):
                return goal
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if recent_messages:
            recent_text = ' '.join([msg.content.lower() for msg in recent_messages[-3:] 
                                  if msg.message_type == 'user_question'])
            
            for goal, patterns in self.goal_patterns.items():
                pattern_matches = sum(1 for pattern in patterns if pattern in recent_text)
                if pattern_matches >= 2:
                    return goal
        
        return 'product_discovery'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _identify_information_gaps(self, user_id: str, goal: str, context: Dict) -> List[str]:
        """–í—ã—è–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏"""
        
        gaps = []
        profile = conversation_memory.user_profiles.get(user_id)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ —Ü–µ–ª—è–º
        goal_requirements = {
            'product_discovery': ['health_focus', 'usage_context', 'product_preference'],
            'comparison': ['comparison_criteria', 'specific_products', 'decision_factors'],
            'purchase_decision': ['product_choice', 'purchase_readiness', 'additional_info'],
            'information_gathering': ['specific_questions', 'detail_level', 'application_context']
        }
        
        required_info = goal_requirements.get(goal, [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
        for info_type in required_info:
            if not self._has_sufficient_info(info_type, profile, context):
                gaps.append(info_type)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        insights = context.get('insights', [])
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —è—Å–Ω–æ—Å—Ç–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, –Ω–æ –µ—Å—Ç—å –Ω–∞–º–µ–∫–∏
        health_insights = [i for i in insights if i['type'] == 'health_concern']
        if not health_insights and goal in ['product_discovery', 'comparison']:
            gaps.append('health_focus')
        
        # –ï—Å–ª–∏ –≤—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–∫—É–ø–∫–µ, –Ω–æ –Ω–µ—Ç —è—Å–Ω–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
        purchase_insights = [i for i in insights if i['type'] == 'purchase_readiness']
        if purchase_insights and not profile:
            gaps.append('product_choice')
        
        return gaps
    
    def _has_sufficient_info(self, info_type: str, profile: Optional[Any], context: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        
        if info_type == 'health_focus':
            insights = context.get('insights', [])
            health_insights = [i for i in insights if i['type'] == 'health_concern']
            return len(health_insights) > 0
        
        elif info_type == 'usage_context':
            return profile and len(profile.preferred_categories) > 0
        
        elif info_type == 'product_preference':
            return profile and len(profile.discussed_products) > 1
        
        elif info_type == 'comparison_criteria':
            insights = context.get('insights', [])
            comparison_insights = [i for i in insights if i['type'] == 'comparison_intent']
            return len(comparison_insights) > 0
        
        elif info_type == 'product_choice':
            return profile and len(profile.discussed_products) > 0
        
        return False
    
    def _calculate_understanding_confidence(self, context: Dict, gaps: List[str]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        base_confidence = 0.3
        
        # –ë–æ–Ω—É—Å –∑–∞ –∏–Ω—Å–∞–π—Ç—ã
        insights = context.get('insights', [])
        confidence_by_insight = {
            'health_concern': 0.2,
            'product_focus': 0.15,
            'synergy_interest': 0.1,
            'purchase_readiness': 0.2
        }
        
        for insight in insights:
            insight_type = insight.get('type')
            if insight_type in confidence_by_insight:
                base_confidence += confidence_by_insight[insight_type] * insight.get('confidence', 0.5)
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        gap_penalty = len(gaps) * 0.1
        base_confidence -= gap_penalty
        
        # –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        momentum = context.get('conversation_momentum', 'starting')
        if momentum == 'high':
            base_confidence += 0.1
        elif momentum == 'medium':
            base_confidence += 0.05
        
        return max(0.0, min(1.0, base_confidence))
    
    def _determine_next_step(self, goal: str, gaps: List[str], confidence: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥–∏—á–µ—Å–∫–∏–π —à–∞–≥ –≤ –¥–∏–∞–ª–æ–≥–µ"""
        
        # –ï—Å–ª–∏ –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if confidence < 0.5 and gaps:
            return 'gather_information'
        
        # –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏
        if goal == 'product_discovery':
            if confidence > 0.7:
                return 'provide_recommendations'
            else:
                return 'clarify_needs'
        
        elif goal == 'comparison':
            if 'comparison_criteria' in gaps:
                return 'clarify_comparison_criteria'
            else:
                return 'provide_comparison'
        
        elif goal == 'purchase_decision':
            if 'product_choice' in gaps:
                return 'help_choose_product'
            else:
                return 'facilitate_purchase'
        
        elif goal == 'information_gathering':
            return 'provide_detailed_information'
        
        return 'continue_conversation'
    
    def _assess_conversation_momentum(self, recent_messages: List[ConversationMessage]) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–º–µ–Ω—Ç—É–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        
        if len(recent_messages) < 2:
            return 'building'
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π
        user_messages = [msg for msg in recent_messages if msg.message_type == 'user_question']
        
        if len(user_messages) >= 3:
            return 'high'
        elif len(user_messages) >= 1:
            return 'maintained'
        else:
            return 'declining'
    
    def _generate_clarification_actions(self, gaps: List[str]) -> List[ConversationAction]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        
        actions = []
        
        for gap in gaps:
            if gap in self.clarification_templates:
                templates = self.clarification_templates[gap]
                
                action = ConversationAction(
                    action_type='ask_question',
                    content=templates[0],  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω
                    priority=1,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π
                    reasoning=f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Ç–æ—á–Ω–∏—Ç—å {gap} –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π",
                    expected_outcome=f"–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {gap}"
                )
                actions.append(action)
        
        return actions
    
    def _generate_discovery_actions(self, user_id: str, state: DialogueState) -> List[ConversationAction]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        
        actions = []
        
        if state.confidence_level > 0.6:
            action = ConversationAction(
                action_type='provide_recommendation',
                content="–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:",
                priority=2,
                reasoning="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
                expected_outcome="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            )
            actions.append(action)
        else:
            action = ConversationAction(
                action_type='clarify_need',
                content="–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö",
                priority=1,
                reasoning="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
                expected_outcome="–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
            )
            actions.append(action)
        
        return actions
    
    def _generate_comparison_actions(self, user_id: str, state: DialogueState) -> List[ConversationAction]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        
        actions = []
        
        action = ConversationAction(
            action_type='provide_recommendation',
            content="–î–∞–≤–∞–π—Ç–µ —Å—Ä–∞–≤–Ω–∏–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –ø—Ä–æ–¥—É–∫—Ç—ã:",
            priority=2,
            reasoning="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
            expected_outcome="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
        )
        actions.append(action)
        
        return actions
    
    def _generate_purchase_actions(self, user_id: str, state: DialogueState) -> List[ConversationAction]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–º–æ—â–∏ —Å –ø–æ–∫—É–ø–∫–æ–π"""
        
        actions = []
        
        action = ConversationAction(
            action_type='provide_recommendation',
            content="–ü–æ–º–æ–≥—É –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –∏ –ø–æ–∫—É–ø–∫–æ–π:",
            priority=1,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            reasoning="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ",
            expected_outcome="–°–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—É –ø–æ–∫—É–ø–∫–∏"
        )
        actions.append(action)
        
        return actions
    
    def _generate_information_actions(self, user_id: str, state: DialogueState) -> List[ConversationAction]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        
        actions = []
        
        action = ConversationAction(
            action_type='provide_recommendation',
            content="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
            priority=3,
            reasoning="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            expected_outcome="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
        )
        actions.append(action)
        
        return actions
    
    def _generate_engagement_actions(self, user_id: str) -> List[ConversationAction]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""
        
        actions = []
        
        engagement_questions = [
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö Aurora?",
            "–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ?",
            "–•–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –∏–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö?"
        ]
        
        action = ConversationAction(
            action_type='ask_question',
            content=engagement_questions[0],
            priority=4,
            reasoning="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞",
            expected_outcome="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        actions.append(action)
        
        return actions
    
    def orchestrate_conversation_flow(self, user_id: str, user_message: str) -> Dict[str, Any]:
        """–û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –¥–∏–∞–ª–æ–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        dialogue_state = self.analyze_conversation_flow(user_id, user_message)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions = self.generate_conversation_actions(user_id, dialogue_state)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        best_action = actions[0] if actions else None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π –æ—Ç–≤–µ—Ç
        conversation_guidance = {
            'dialogue_state': {
                'goal': dialogue_state.current_goal,
                'confidence': dialogue_state.confidence_level,
                'next_step': dialogue_state.next_logical_step,
                'momentum': dialogue_state.conversation_momentum,
                'information_gaps': dialogue_state.information_gaps
            },
            'recommended_action': {
                'type': best_action.action_type if best_action else 'continue_conversation',
                'content': best_action.content if best_action else '',
                'priority': best_action.priority if best_action else 5,
                'reasoning': best_action.reasoning if best_action else ''
            },
            'conversation_suggestions': [action.content for action in actions],
            'personalization_prompt': context_analyzer.generate_contextual_prompt(user_id, user_message)
        }
        
        return conversation_guidance

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
conversation_flow_manager = ConversationFlowManager()

