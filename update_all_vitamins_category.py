import json
import os
from datetime import datetime

def update_category_in_file(file_path):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8-sig') as f:
            products = json.load(f)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        updated_count = 0
        for product in products:
            if product['category'] == '–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã':
                product['category'] = '–í–∏—Ç–∞–º–∏–Ω—ã, –º–∏–Ω–µ—Ä–∞–ª—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã'
                updated_count += 1
                print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {product['product']}")
        
        if updated_count > 0:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            with open(backup_path, 'w', encoding='utf-8') as f:
                json.dump(products, f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(products, f, ensure_ascii=False, indent=2)
            
            print(f"  üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            return updated_count
        else:
            print(f"  ‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π '–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 0
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã' –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö...")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    files_to_update = [
        'knowledge_base.json',
        'knowledge_base_new.json',
        'knowledge_base_fixed.json',
        'knowledge_base_backup.json'
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    backup_files = [f for f in os.listdir('.') if f.startswith('knowledge_base_backup_') and f.endswith('.json')]
    files_to_update.extend(backup_files)
    
    total_updated = 0
    
    for file_path in files_to_update:
        if os.path.exists(file_path):
            print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_path}")
            updated_count = update_category_in_file(file_path)
            total_updated += updated_count
        else:
            print(f"\nüìÅ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"üìà –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {total_updated}")
    
    if total_updated > 0:
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üîÑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞: '–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã' ‚Üí '–í–∏—Ç–∞–º–∏–Ω—ã, –º–∏–Ω–µ—Ä–∞–ª—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã'")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            from enhanced_vector_db import enhanced_vector_db
            print("\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            enhanced_vector_db.index_knowledge()
            print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except ImportError:
            print("‚ö†Ô∏è –ú–æ–¥—É–ª—å enhanced_vector_db –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã: {e}")
    else:
        print("‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π '–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ")

if __name__ == "__main__":
    main()





