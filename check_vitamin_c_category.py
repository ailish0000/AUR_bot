#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json

def check_vitamin_c_category():
    """–ò—â–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –í–∏—Ç–∞–º–∏–Ω –° –≤ –±–∞–∑–∞—Ö –∑–Ω–∞–Ω–∏–π"""
    
    print("üîç –ü–û–ò–°–ö –ö–ê–¢–ï–ì–û–†–ò–ò '–í–ò–¢–ê–ú–ò–ù –°'")
    print("="*40)
    
    all_categories = set()
    vitamin_c_products = []
    
    for kb_file in ['knowledge_base.json', 'knowledge_base_new.json']:
        print(f"\nüìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º {kb_file}...")
        
        try:
            with open(kb_file, 'r', encoding='utf-8') as f:
                kb_data = json.load(f)
            
            for item in kb_data:
                category = item.get('category', '')
                product = item.get('product', '')
                
                if category:
                    all_categories.add(category)
                
                # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º –°
                if category and ('–≤–∏—Ç–∞–º–∏–Ω —Å' in category.lower() or 'vitamin c' in category.lower()):
                    vitamin_c_products.append({
                        'product': product,
                        'category': category,
                        'file': kb_file
                    })
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {product} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {kb_file}: {e}")
    
    print(f"\nüìã –í–°–ï –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò ({len(all_categories)}):")
    for category in sorted(all_categories):
        if '–≤–∏—Ç–∞–º–∏–Ω' in category.lower():
            print(f"  üéØ {category}")  # –≤—ã–¥–µ–ª—è–µ–º –≤–∏—Ç–∞–º–∏–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        else:
            print(f"  ‚Ä¢ {category}")
    
    if vitamin_c_products:
        print(f"\n‚úÖ –ù–ê–ô–î–ï–ù–ê –ö–ê–¢–ï–ì–û–†–ò–Ø '–í–ò–¢–ê–ú–ò–ù –°'!")
        print(f"–ü—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(vitamin_c_products)}")
        
        for item in vitamin_c_products:
            print(f"  ‚Ä¢ {item['product']} ({item['file']})")
        
        return vitamin_c_products
    else:
        print(f"\n‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–í–∏—Ç–∞–º–∏–Ω –°' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º –° –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        print("\nüîç –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º –° –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö...")
        
        for kb_file in ['knowledge_base.json', 'knowledge_base_new.json']:
            try:
                with open(kb_file, 'r', encoding='utf-8') as f:
                    kb_data = json.load(f)
                
                for item in kb_data:
                    product = item.get('product', '')
                    category = item.get('category', '')
                    description = item.get('description', '').lower()
                    composition = item.get('composition', '').lower()
                    
                    search_text = f"{product.lower()} {description} {composition}"
                    
                    if '–æ—Ä–∞–Ω–∂' in search_text or '–∞—Å–∫–æ—Ä–±–∏–Ω' in search_text:
                        print(f"  üì¶ {product} ({category}) - —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏—Ç–∞–º–∏–Ω –°")
                        
            except Exception as e:
                continue
        
        return []

if __name__ == "__main__":
    vitamin_c_products = check_vitamin_c_category()
    
    if vitamin_c_products:
        print(f"\nüîß –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨ –í smart_nlp_parser.py:")
        print(f"'–í–∏—Ç–∞–º–∏–Ω –°': [r'–≤–∏—Ç–∞–º–∏–Ω\\s*—Å', r'vitamin\\s*c'],")
    else:
        print(f"\nüí° –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –µ—ë")





