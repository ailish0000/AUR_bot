"""
üéØ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è Aurora Bot
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import json
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from conversation_memory import conversation_memory, UserProfile
from context_analyzer import context_analyzer
import logging

logger = logging.getLogger(__name__)

@dataclass
class PersonalizedRecommendation:
    """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"""
    product_name: str
    relevance_score: float  # 0.0 - 1.0
    recommendation_type: str  # 'primary', 'complementary', 'alternative'
    reasoning: str
    confidence: float
    personalization_factors: List[str]

@dataclass
class RecommendationContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    user_query: str
    user_profile: Optional[UserProfile]
    conversation_context: Dict[str, Any]
    health_focus: List[str]
    previous_interests: List[str]
    purchase_intent_level: float

class PersonalizedRecommendationEngine:
    """–î–≤–∏–∂–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    
    def __init__(self):
        # –ö–∞—Ä—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        self.product_database = {
            '–ú–∞–≥–Ω–∏–π –ü–ª—é—Å (Mg Plus)': {
                'categories': ['–º–∏–Ω–µ—Ä–∞–ª—ã', '–Ω–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', '—Å–µ—Ä–¥—Ü–µ'],
                'health_benefits': ['—Å—Ç—Ä–µ—Å—Å', '—Å–æ–Ω', '–º—ã—à—Ü—ã', '–Ω–µ—Ä–≤—ã'],
                'target_audience': ['—Å—Ç—Ä–µ—Å—Å', '–±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞', '—Å–ø–æ—Ä—Ç'],
                'synergy_partners': ['–ö–∞–ª—å—Ü–∏–π', '–í–∏—Ç–∞–º–∏–Ω D', '–í–∏—Ç–∞–º–∏–Ω B6'],
                'price_category': 'medium'
            },
            '–ú–∞–≥–Ω–∏–π-–í–µ—á–µ—Ä (Mg-Evening)': {
                'categories': ['–º–∏–Ω–µ—Ä–∞–ª—ã', '—Å–æ–Ω', '—Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è'],
                'health_benefits': ['—Å–æ–Ω', '—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ', '—Å—Ç—Ä–µ—Å—Å'],
                'target_audience': ['–±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞', '—Å—Ç—Ä–µ—Å—Å', '—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å'],
                'synergy_partners': ['–ú–∞–≥–Ω–∏–π –ü–ª—é—Å', '–í–∏—Ç–∞–º–∏–Ω B –∫–æ–º–ø–ª–µ–∫—Å'],
                'price_category': 'medium'
            },
            '–°–∏–ª–∏—Ü–∏—Ç–∏–Ω (Silicitin)': {
                'categories': ['–≥–µ–ø–∞—Ç–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä—ã', '–ø–µ—á–µ–Ω—å', '–¥–µ—Ç–æ–∫—Å'],
                'health_benefits': ['–ø–µ—á–µ–Ω—å', '–¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è', '–º–µ—Ç–∞–±–æ–ª–∏–∑–º'],
                'target_audience': ['–ø—Ä–æ–±–ª–µ–º—ã –ø–µ—á–µ–Ω–∏', '–¥–µ—Ç–æ–∫—Å', '–º–µ—Ç–∞–±–æ–ª–∏–∑–º'],
                'synergy_partners': ['–ë–∏—Ç–µ—Ä–æ–Ω-H', '–í–∏—Ç–∞–º–∏–Ω E'],
                'price_category': 'high'
            },
            '–ê—Ä–≥–µ–Ω—Ç-–ú–∞–∫—Å': {
                'categories': ['–∏–º–º—É–Ω–∏—Ç–µ—Ç', '–∞–Ω—Ç–∏–±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π', '—Å–µ—Ä–µ–±—Ä–æ'],
                'health_benefits': ['–∏–º–º—É–Ω–∏—Ç–µ—Ç', '–∞–Ω—Ç–∏–±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π', '–ø—Ä–æ—Ç–∏–≤–æ–≤–∏—Ä—É—Å–Ω—ã–π'],
                'target_audience': ['—á–∞—Å—Ç—ã–µ –±–æ–ª–µ–∑–Ω–∏', '–Ω–∏–∑–∫–∏–π –∏–º–º—É–Ω–∏—Ç–µ—Ç', '–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞'],
                'synergy_partners': ['–í–∏—Ç–∞–º–∏–Ω C', '–ë–ê–†–°-2', '–°–æ–ª–±–µ—Ä—Ä–∏'],
                'price_category': 'high'
            },
            '–í–∏—Ç–∞–º–∏–Ω –°': {
                'categories': ['–≤–∏—Ç–∞–º–∏–Ω—ã', '–∏–º–º—É–Ω–∏—Ç–µ—Ç', '–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã'],
                'health_benefits': ['–∏–º–º—É–Ω–∏—Ç–µ—Ç', '–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç', '–∫–æ–ª–ª–∞–≥–µ–Ω'],
                'target_audience': ['–∏–º–º—É–Ω–∏—Ç–µ—Ç', '–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç', '–∫—Ä–∞—Å–æ—Ç–∞'],
                'synergy_partners': ['–ê—Ä–≥–µ–Ω—Ç-–ú–∞–∫—Å', '–¶–∏–Ω–∫', '–ñ–µ–ª–µ–∑–æ'],
                'price_category': 'low'
            },
            '–ë–ê–†–°-2 (BARS-2)': {
                'categories': ['–∏–º–º—É–Ω–∏—Ç–µ—Ç', '–∫–æ–º–ø–ª–µ–∫—Å', '–∞–¥–∞–ø—Ç–æ–≥–µ–Ω—ã'],
                'health_benefits': ['–∏–º–º—É–Ω–∏—Ç–µ—Ç', '–∞–¥–∞–ø—Ç–∞—Ü–∏—è', '—ç–Ω–µ—Ä–≥–∏—è'],
                'target_audience': ['—Å–ª–∞–±—ã–π –∏–º–º—É–Ω–∏—Ç–µ—Ç', '—É—Å—Ç–∞–ª–æ—Å—Ç—å', '—Å—Ç—Ä–µ—Å—Å'],
                'synergy_partners': ['–ê—Ä–≥–µ–Ω—Ç-–ú–∞–∫—Å', '–í–∏—Ç–∞–º–∏–Ω C', '–ú–∞–≥–Ω–∏–π'],
                'price_category': 'medium'
            },
            '–°–æ–ª–±–µ—Ä—Ä–∏': {
                'categories': ['–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã', '—è–≥–æ–¥—ã', '–∏–º–º—É–Ω–∏—Ç–µ—Ç'],
                'health_benefits': ['–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç', '–∑—Ä–µ–Ω–∏–µ', '–∏–º–º—É–Ω–∏—Ç–µ—Ç'],
                'target_audience': ['–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç', '–∑—Ä–µ–Ω–∏–µ', '–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞'],
                'synergy_partners': ['–í–∏—Ç–∞–º–∏–Ω C', '–í–∏—Ç–∞–º–∏–Ω E', '–ê—Ä–≥–µ–Ω—Ç-–ú–∞–∫—Å'],
                'price_category': 'medium'
            },
            '–ë–∏—Ç–µ—Ä–æ–Ω-H': {
                'categories': ['–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã', '—Å–≤–µ–∫–ª–∞', '–º–µ—Ç–∞–±–æ–ª–∏–∑–º'],
                'health_benefits': ['–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç', '–º–µ—Ç–∞–±–æ–ª–∏–∑–º', '—ç–Ω–µ—Ä–≥–∏—è'],
                'target_audience': ['–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç', '—ç–Ω–µ—Ä–≥–∏—è', '–º–µ—Ç–∞–±–æ–ª–∏–∑–º'],
                'synergy_partners': ['–°–∏–ª–∏—Ü–∏—Ç–∏–Ω', '–í–∏—Ç–∞–º–∏–Ω C', '–°–æ–ª–±–µ—Ä—Ä–∏'],
                'price_category': 'medium'
            }
        }
        
        # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        self.personalization_weights = {
            'previous_discussion': 0.3,      # –†–∞–Ω–µ–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            'health_focus_match': 0.4,       # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–±–ª–µ–º–∞–º –∑–¥–æ—Ä–æ–≤—å—è
            'synergy_bonus': 0.2,            # –°–∏–Ω–µ—Ä–≥–∏—è —Å —Ä–∞–Ω–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
            'conversation_stage': 0.1        # –°—Ç–∞–¥–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        }
    
    def generate_personalized_recommendations(self, user_id: str, query: str, 
                                            base_recommendations: List[str]) -> List[PersonalizedRecommendation]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context = self._build_recommendation_context(user_id, query)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        personalized_recs = []
        
        for product_name in base_recommendations:
            if product_name in self.product_database:
                rec = self._create_personalized_recommendation(product_name, context)
                if rec:
                    personalized_recs.append(rec)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        additional_recs = self._generate_additional_recommendations(context, personalized_recs)
        personalized_recs.extend(additional_recs)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        personalized_recs.sort(key=lambda x: x.relevance_score, reverse=True)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return personalized_recs[:6]
    
    def _build_recommendation_context(self, user_id: str, query: str) -> RecommendationContext:
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        
        profile = conversation_memory.user_profiles.get(user_id)
        conversation_context = context_analyzer.analyze_conversation_context(user_id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        health_focus = []
        for insight in conversation_context.get('insights', []):
            if insight['type'] == 'health_concern':
                health_focus.append(insight['details']['health_area'])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
        previous_interests = []
        if profile:
            previous_interests = list(profile.preferred_categories.keys())
        
        return RecommendationContext(
            user_query=query,
            user_profile=profile,
            conversation_context=conversation_context,
            health_focus=health_focus,
            previous_interests=previous_interests,
            purchase_intent_level=profile.purchase_intent_level if profile else 0.1
        )
    
    def _create_personalized_recommendation(self, product_name: str, 
                                          context: RecommendationContext) -> Optional[PersonalizedRecommendation]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        
        product_info = self.product_database.get(product_name)
        if not product_info:
            return None
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        relevance_score = self._calculate_personalized_relevance(product_name, product_info, context)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendation_type = self._determine_recommendation_type(product_name, context)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        reasoning = self._generate_personalized_reasoning(product_name, product_info, context)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        personalization_factors = self._identify_personalization_factors(product_name, product_info, context)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = self._calculate_recommendation_confidence(product_info, context)
        
        return PersonalizedRecommendation(
            product_name=product_name,
            relevance_score=relevance_score,
            recommendation_type=recommendation_type,
            reasoning=reasoning,
            confidence=confidence,
            personalization_factors=personalization_factors
        )
    
    def _calculate_personalized_relevance(self, product_name: str, product_info: Dict, 
                                        context: RecommendationContext) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞"""
        
        base_score = 0.5  # –ë–∞–∑–æ–≤–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        if context.user_profile and product_name in context.user_profile.discussed_products:
            discussion_count = context.user_profile.discussed_products[product_name]
            previous_bonus = min(0.3, discussion_count * 0.1) * self.personalization_weights['previous_discussion']
            base_score += previous_bonus
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–±–ª–µ–º–∞–º –∑–¥–æ—Ä–æ–≤—å—è
        health_matches = len(set(product_info['health_benefits']) & set(context.health_focus))
        if health_matches > 0:
            health_bonus = min(0.4, health_matches * 0.2) * self.personalization_weights['health_focus_match']
            base_score += health_bonus
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–∏–Ω–µ—Ä–≥–∏—é —Å —Ä–∞–Ω–µ–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        if context.user_profile:
            synergy_score = 0
            for discussed_product in context.user_profile.discussed_products.keys():
                if discussed_product in product_info['synergy_partners']:
                    synergy_score += 0.15
            
            synergy_bonus = min(0.2, synergy_score) * self.personalization_weights['synergy_bonus']
            base_score += synergy_bonus
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞–¥–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        stage_bonus = 0
        if context.user_profile:
            if context.user_profile.conversation_stage == 'decision' and context.purchase_intent_level > 0.7:
                stage_bonus = 0.1
            elif context.user_profile.conversation_stage == 'narrowing':
                stage_bonus = 0.05
        
        base_score += stage_bonus * self.personalization_weights['conversation_stage']
        
        return min(1.0, base_score)
    
    def _determine_recommendation_type(self, product_name: str, context: RecommendationContext) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        if context.user_profile and product_name in context.user_profile.discussed_products:
            discussion_count = context.user_profile.discussed_products[product_name]
            if discussion_count >= 2:
                return 'primary'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å–∏–Ω–µ—Ä–≥–∏—á–µ—Å–∫–∏–º –∫ —É–∂–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã–º
        if context.user_profile:
            product_info = self.product_database.get(product_name, {})
            for discussed_product in context.user_profile.discussed_products.keys():
                if discussed_product in product_info.get('synergy_partners', []):
                    return 'complementary'
        
        return 'alternative'
    
    def _generate_personalized_reasoning(self, product_name: str, product_info: Dict, 
                                       context: RecommendationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        reasons = []
        
        # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        if context.user_profile and product_name in context.user_profile.discussed_products:
            reasons.append("–≤—ã —É–∂–µ –ø—Ä–æ—è–≤–ª—è–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç—Ç–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É")
        
        # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º –∑–¥–æ—Ä–æ–≤—å—è
        health_matches = set(product_info['health_benefits']) & set(context.health_focus)
        if health_matches:
            health_areas = ', '.join(health_matches)
            reasons.append(f"–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏: {health_areas}")
        
        # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å–∏–Ω–µ—Ä–≥–∏–∏
        if context.user_profile:
            synergy_products = []
            for discussed_product in context.user_profile.discussed_products.keys():
                if discussed_product in product_info['synergy_partners']:
                    synergy_products.append(discussed_product)
            
            if synergy_products:
                synergy_list = ', '.join(synergy_products)
                reasons.append(f"—Ö–æ—Ä–æ—à–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å {synergy_list}")
        
        # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        if context.user_profile:
            if context.user_profile.conversation_stage == 'decision':
                reasons.append("–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ")
            elif context.purchase_intent_level > 0.6:
                reasons.append("—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –≤—ã—Å–æ–∫–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É –∫ –ø–æ–∫—É–ø–∫–µ")
        
        if not reasons:
            reasons.append("–ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å")
        
        return "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ " + " –∏ ".join(reasons)
    
    def _identify_personalization_factors(self, product_name: str, product_info: Dict, 
                                        context: RecommendationContext) -> List[str]:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç–æ—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        
        factors = []
        
        if context.user_profile and product_name in context.user_profile.discussed_products:
            factors.append('previous_interest')
        
        health_matches = set(product_info['health_benefits']) & set(context.health_focus)
        if health_matches:
            factors.append('health_focus_match')
        
        if context.user_profile:
            for discussed_product in context.user_profile.discussed_products.keys():
                if discussed_product in product_info['synergy_partners']:
                    factors.append('synergy_match')
                    break
        
        if context.purchase_intent_level > 0.6:
            factors.append('high_purchase_intent')
        
        return factors
    
    def _calculate_recommendation_confidence(self, product_info: Dict, 
                                           context: RecommendationContext) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        confidence = 0.5  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–¥–æ—Ä–æ–≤—å—é
        health_matches = len(set(product_info['health_benefits']) & set(context.health_focus))
        confidence += health_matches * 0.15
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        if context.user_profile:
            total_interactions = context.user_profile.total_interactions
            if total_interactions > 5:
                confidence += 0.1
            if total_interactions > 10:
                confidence += 0.1
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–∫—É–ø–∫–µ
        if context.purchase_intent_level > 0.7:
            confidence += 0.15
        
        return min(1.0, confidence)
    
    def _generate_additional_recommendations(self, context: RecommendationContext, 
                                           existing_recs: List[PersonalizedRecommendation]) -> List[PersonalizedRecommendation]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        
        additional_recs = []
        existing_products = {rec.product_name for rec in existing_recs}
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–∏–Ω–µ—Ä–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        for rec in existing_recs:
            if rec.relevance_score > 0.7:  # –¢–æ–ª—å–∫–æ –¥–ª—è –≤—ã—Å–æ–∫–æ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
                product_info = self.product_database.get(rec.product_name, {})
                for synergy_partner in product_info.get('synergy_partners', []):
                    if (synergy_partner in self.product_database and 
                        synergy_partner not in existing_products):
                        
                        synergy_rec = self._create_synergy_recommendation(
                            synergy_partner, rec.product_name, context)
                        if synergy_rec:
                            additional_recs.append(synergy_rec)
                            existing_products.add(synergy_partner)
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        if context.user_profile:
            for category in context.user_profile.preferred_categories.keys():
                candidate_products = self._find_products_by_category(category)
                for product in candidate_products:
                    if product not in existing_products:
                        category_rec = self._create_category_recommendation(
                            product, category, context)
                        if category_rec and category_rec.relevance_score > 0.5:
                            additional_recs.append(category_rec)
                            existing_products.add(product)
                            break  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        return additional_recs
    
    def _create_synergy_recommendation(self, product_name: str, partner_product: str, 
                                     context: RecommendationContext) -> Optional[PersonalizedRecommendation]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–Ω–µ—Ä–≥–∏–∏"""
        
        product_info = self.product_database.get(product_name)
        if not product_info:
            return None
        
        return PersonalizedRecommendation(
            product_name=product_name,
            relevance_score=0.6,  # –°—Ä–µ–¥–Ω—è—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–Ω–µ—Ä–≥–∏—á–µ—Å–∫–∏—Ö
            recommendation_type='complementary',
            reasoning=f"–û—Ç–ª–∏—á–Ω–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å {partner_product} –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞",
            confidence=0.7,
            personalization_factors=['synergy_match']
        )
    
    def _create_category_recommendation(self, product_name: str, category: str, 
                                      context: RecommendationContext) -> Optional[PersonalizedRecommendation]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        
        product_info = self.product_database.get(product_name)
        if not product_info:
            return None
        
        return PersonalizedRecommendation(
            product_name=product_name,
            relevance_score=0.5,  # –ë–∞–∑–æ–≤–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö
            recommendation_type='alternative',
            reasoning=f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'",
            confidence=0.6,
            personalization_factors=['category_preference']
        )
    
    def _find_products_by_category(self, category: str) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        
        matching_products = []
        for product_name, product_info in self.product_database.items():
            if category in product_info.get('categories', []):
                matching_products.append(product_name)
        
        return matching_products
    
    def generate_personalized_response(self, user_id: str, base_response: str, 
                                     recommendations: List[PersonalizedRecommendation]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        
        if not recommendations:
            return base_response
        
        context = conversation_memory.get_conversation_context(user_id)
        profile = context.get('user_profile')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ
        intro_parts = []
        
        if profile:
            stage = profile.get('conversation_stage', 'exploration')
            total_interactions = profile.get('total_interactions', 0)
            
            if total_interactions > 1:
                intro_parts.append("–£—á–∏—Ç—ã–≤–∞—è –Ω–∞—à—É –±–µ—Å–µ–¥—É")
            
            if stage == 'decision':
                intro_parts.append("–∏ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–∫—É–ø–∫–µ")
            elif stage == 'narrowing':
                intro_parts.append("–∏ –≤–∞—à –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_parts = [base_response]
        
        if intro_parts:
            intro = ", ".join(intro_parts)
            response_parts.append(f"\n{intro.capitalize()}, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:")
        else:
            response_parts.append("\n–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏
        top_recommendations = recommendations[:3]
        
        for i, rec in enumerate(top_recommendations, 1):
            response_parts.append(f"\n{i}. {rec.product_name}")
            response_parts.append(f"   {rec.reasoning}")
            
            if rec.recommendation_type == 'complementary':
                response_parts.append("   üí´ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞")
            elif rec.recommendation_type == 'primary':
                response_parts.append("   ‚≠ê –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
        if profile and profile.get('purchase_intent_level', 0) > 0.6:
            response_parts.append("\nüí° –ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç?")
        else:
            response_parts.append("\n‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º?")
        
        return "".join(response_parts)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
recommendation_engine = PersonalizedRecommendationEngine()

