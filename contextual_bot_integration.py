"""
üß† –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º Aurora
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
"""

from typing import Dict, List, Optional, Any, Tuple
from conversation_memory import conversation_memory, ConversationMessage
from context_analyzer import context_analyzer
from personalized_recommendations import recommendation_engine
from conversation_flow import conversation_flow_manager
import logging

logger = logging.getLogger(__name__)

class ContextualBotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.memory = conversation_memory
        self.analyzer = context_analyzer
        self.recommender = recommendation_engine
        self.flow_manager = conversation_flow_manager
        
        logger.info("üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def process_user_message(self, user_id: str, message: str, intent: Optional[str] = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
            self.memory.add_message(
                user_id=user_id,
                message_type='user_question',
                content=message,
                intent=intent
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –¥–∏–∞–ª–æ–≥–∞
            conversation_guidance = self.flow_manager.orchestrate_conversation_flow(user_id, message)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_insights = self.memory.get_user_insights(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π –ø—Ä–æ–º–ø—Ç
            contextual_prompt = self.analyzer.generate_contextual_prompt(user_id, message)
            
            return {
                'contextual_prompt': contextual_prompt,
                'conversation_guidance': conversation_guidance,
                'user_insights': user_insights,
                'should_ask_clarifying_question': self._should_ask_clarifying_question(conversation_guidance),
                'personalization_level': self._calculate_personalization_level(user_id)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return self._fallback_response()
    
    def enhance_bot_response(self, user_id: str, base_response: str, 
                           found_products: List[str]) -> Dict[str, Any]:
        """–£–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            personalized_recs = self.recommender.generate_personalized_recommendations(
                user_id, "", found_products
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            enhanced_response = self.recommender.generate_personalized_response(
                user_id, base_response, personalized_recs
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä—É
            conversation_context = self.analyzer.analyze_conversation_context(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            follow_up_suggestions = self._generate_follow_up_suggestions(
                user_id, conversation_context
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ø–∞–º—è—Ç—å
            self.memory.add_message(
                user_id=user_id,
                message_type='bot_response',
                content=enhanced_response,
                products_mentioned=found_products
            )
            
            return {
                'enhanced_response': enhanced_response,
                'personalized_recommendations': personalized_recs,
                'follow_up_suggestions': follow_up_suggestions,
                'conversation_momentum': conversation_context.get('conversation_momentum', 'medium'),
                'next_best_action': conversation_context.get('next_best_action', 'continue_consultation')
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                'enhanced_response': base_response,
                'personalized_recommendations': [],
                'follow_up_suggestions': [],
                'conversation_momentum': 'medium',
                'next_best_action': 'continue_consultation'
            }
    
    def handle_product_selection(self, user_id: str, selected_product: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –ø–∞–º—è—Ç—å
            self.memory.add_message(
                user_id=user_id,
                message_type='product_selection',
                content=f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {selected_product}",
                products_mentioned=[selected_product]
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
            context = self.analyzer.analyze_conversation_context(user_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            next_actions = self._generate_post_selection_actions(user_id, selected_product, context)
            
            return {
                'selected_product': selected_product,
                'next_actions': next_actions,
                'should_offer_synergy': self._should_offer_synergy_products(user_id, selected_product),
                'purchase_readiness': self._assess_purchase_readiness(user_id)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return {'selected_product': selected_product, 'next_actions': []}
    
    def handle_link_request(self, user_id: str, requested_product: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç"""
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏
            self.memory.add_message(
                user_id=user_id,
                message_type='product_link',
                content=f"–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞: {requested_product}",
                products_mentioned=[requested_product]
            )
            
            # –≠—Ç–æ —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
            profile = self.memory.user_profiles.get(user_id)
            if profile:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
                profile.purchase_intent_level = min(1.0, profile.purchase_intent_level + 0.25)
                profile.conversation_stage = 'decision'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            follow_up_actions = self._generate_post_link_actions(user_id, requested_product)
            
            return {
                'requested_product': requested_product,
                'high_purchase_intent': True,
                'follow_up_actions': follow_up_actions,
                'should_suggest_complementary': True
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å—Å—ã–ª–∫–∏: {e}")
            return {'requested_product': requested_product}
    
    def get_conversation_summary(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        try:
            context = self.memory.get_conversation_context(user_id)
            insights = self.analyzer.analyze_conversation_context(user_id)
            user_insights = self.memory.get_user_insights(user_id)
            
            return {
                'conversation_context': context,
                'behavioral_insights': insights,
                'user_profile_insights': user_insights,
                'recommendation_summary': self._summarize_recommendations(user_id)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ: {e}")
            return {}
    
    def _should_ask_clarifying_question(self, guidance: Dict[str, Any]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        
        dialogue_state = guidance.get('dialogue_state', {})
        confidence = dialogue_state.get('confidence', 0.5)
        gaps = dialogue_state.get('information_gaps', [])
        
        return confidence < 0.6 and len(gaps) > 0
    
    def _calculate_personalization_level(self, user_id: str) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        profile = self.memory.user_profiles.get(user_id)
        
        if not profile:
            return 'basic'
        
        if profile.total_interactions > 10:
            return 'high'
        elif profile.total_interactions > 3:
            return 'medium'
        else:
            return 'basic'
    
    def _generate_follow_up_suggestions(self, user_id: str, context: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        
        suggestions = []
        
        next_action = context.get('next_best_action', '')
        
        if 'facilitate_purchase' in next_action:
            suggestions.append("–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç?")
            suggestions.append("–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–ø–æ—Å–æ–±—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è?")
        
        elif 'explain_synergy' in next_action:
            suggestions.append("–†–∞—Å—Å–∫–∞–∂—É –æ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏")
            suggestions.append("–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥?")
        
        elif 'provide_comparison' in next_action:
            suggestions.append("–°—Ä–∞–≤–Ω–∏—Ç—å —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏?")
            suggestions.append("–£–∑–Ω–∞—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞?")
        
        else:
            suggestions.append("–ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã?")
            suggestions.append("–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é?")
        
        return suggestions
    
    def _generate_post_selection_actions(self, user_id: str, product: str, context: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        
        actions = []
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        actions.append(f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {product}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–µ—Ä–≥–∏—é
        if self._should_offer_synergy_products(user_id, product):
            actions.append("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ—á–µ—Ç–∞–Ω–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ
        if self._assess_purchase_readiness(user_id) > 0.6:
            actions.append("–ü–æ–º–æ—â—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞")
        
        return actions
    
    def _should_offer_synergy_products(self, user_id: str, product: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∏–Ω–µ—Ä–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
        
        product_info = self.recommender.product_database.get(product, {})
        synergy_partners = product_info.get('synergy_partners', [])
        
        profile = self.memory.user_profiles.get(user_id)
        
        # –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—è–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∫–æ–º–ø–ª–µ–∫—Å–∞–º
        if synergy_partners and profile:
            synergy_mentions = profile.preferred_categories.get('–∫–æ–º–ø–ª–µ–∫—Å', 0)
            return synergy_mentions > 0 or len(profile.discussed_products) > 1
        
        return len(synergy_partners) > 0
    
    def _assess_purchase_readiness(self, user_id: str) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ"""
        
        profile = self.memory.user_profiles.get(user_id)
        
        if profile:
            return profile.purchase_intent_level
        
        return 0.1
    
    def _generate_post_link_actions(self, user_id: str, product: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ —Å—Å—ã–ª–∫–∏"""
        
        actions = []
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        if self._should_offer_synergy_products(user_id, product):
            actions.append("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        actions.append("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ/–∑–∞–∫–∞–∑–µ
        actions.append("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –∏ –¥–æ—Å—Ç–∞–≤–∫–µ")
        
        return actions
    
    def _summarize_recommendations(self, user_id: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—é–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        profile = self.memory.user_profiles.get(user_id)
        
        if not profile:
            return {}
        
        return {
            'total_products_discussed': len(profile.discussed_products),
            'top_interests': list(profile.preferred_categories.keys())[:3],
            'conversation_stage': profile.conversation_stage,
            'purchase_readiness': profile.purchase_intent_level,
            'most_discussed_products': sorted(profile.discussed_products.items(), 
                                            key=lambda x: x[1], reverse=True)[:3]
        }
    
    def _fallback_response(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        
        return {
            'contextual_prompt': '',
            'conversation_guidance': {},
            'user_insights': {},
            'should_ask_clarifying_question': False,
            'personalization_level': 'basic'
        }
    
    def cleanup_old_data(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        
        try:
            self.memory.cleanup_old_conversations()
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
contextual_integration = ContextualBotIntegration()

