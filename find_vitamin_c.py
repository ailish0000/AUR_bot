#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json

def find_vitamin_c_products():
    """–ò—â–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º –° –≤ –±–∞–∑–∞—Ö –∑–Ω–∞–Ω–∏–π"""
    
    print("üîç –ü–û–ò–°–ö –ü–†–û–î–£–ö–¢–û–í –° –í–ò–¢–ê–ú–ò–ù–û–ú –°")
    print("="*50)
    
    vitamin_c_products = []
    
    for kb_file in ['knowledge_base.json', 'knowledge_base_new.json']:
        print(f"\nüìÇ –ò—â–µ–º –≤ {kb_file}...")
        
        try:
            with open(kb_file, 'r', encoding='utf-8') as f:
                kb_data = json.load(f)
            
            for item in kb_data:
                product_name = item.get('product', '')
                description = item.get('description', '').lower()
                composition = item.get('composition', '').lower()
                benefits = ' '.join(item.get('benefits', [])).lower()
                
                # –ò—â–µ–º –≤–∏—Ç–∞–º–∏–Ω –°
                search_text = f"{product_name.lower()} {description} {composition} {benefits}"
                
                if any(term in search_text for term in [
                    '–≤–∏—Ç–∞–º–∏–Ω —Å', 'vitamin c', '–∞—Å–∫–æ—Ä–±–∏–Ω', '–æ—Ä–∞–Ω–∂'
                ]):
                    vitamin_c_products.append({
                        'product': product_name,
                        'file': kb_file,
                        'description': item.get('description', '')[:300],
                        'composition': item.get('composition', '')[:300],
                        'benefits': item.get('benefits', [])[:3]
                    })
                    
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {product_name}")
                    if '–≤–∏—Ç–∞–º–∏–Ω —Å' in search_text:
                        print("   üéØ –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ '–≤–∏—Ç–∞–º–∏–Ω –°'")
                    if '–∞—Å–∫–æ—Ä–±–∏–Ω' in search_text:
                        print("   üéØ –°–æ–¥–µ—Ä–∂–∏—Ç –∞—Å–∫–æ—Ä–±–∏–Ω–æ–≤—É—é –∫–∏—Å–ª–æ—Ç—É")
                    if '–æ—Ä–∞–Ω–∂' in search_text:
                        print("   üçä –û—Ä–∞–Ω–∂ –ø—Ä–æ–¥—É–∫—Ç (–æ–±—ã—á–Ω–æ —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º –°)")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {kb_file}: {e}")
    
    print(f"\nüìä –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û: {len(vitamin_c_products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    return vitamin_c_products

def check_metadata_for_vitamin_c():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫ –≤–∏—Ç–∞–º–∏–Ω –° –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    
    print(f"\n" + "="*50)
    print("üî¨ –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–ê–î–ê–ù–ù–´–• –î–õ–Ø –í–ò–¢–ê–ú–ò–ù–ê –°")
    print("="*50)
    
    try:
        with open('products_metadata.json', 'r', encoding='utf-8') as f:
            metadata = json.load(f)
        
        vitamin_c_in_metadata = []
        
        for item in metadata:
            product_name = item['product_name'].lower()
            components = [c.lower() for c in item.get('main_components', [])]
            
            # –ò—â–µ–º –≤–∏—Ç–∞–º–∏–Ω –° –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if any(term in product_name for term in ['–æ—Ä–∞–Ω–∂']) or \
               any('–≤–∏—Ç–∞–º–∏–Ω —Å' in comp or '–∞—Å–∫–æ—Ä–±–∏–Ω' in comp for comp in components):
                
                vitamin_c_in_metadata.append({
                    'product': item['product_name'],
                    'category': item['category'],
                    'components': item.get('main_components', [])[:5],
                    'properties': item.get('properties', [])
                })
                
                print(f"‚úÖ –í –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {item['product_name']}")
                print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}")
                print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(item.get('main_components', [])[:3])}")
        
        print(f"\nüìä –í –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ: {len(vitamin_c_in_metadata)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        return vitamin_c_in_metadata
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def test_vitamin_c_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –≤–∏—Ç–∞–º–∏–Ω–∞ –° —É–º–Ω—ã–º –ø–æ–∏—Å–∫–æ–º"""
    
    print(f"\n" + "="*50)
    print("üß™ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –í–ò–¢–ê–ú–ò–ù–ê –°")
    print("="*50)
    
    try:
        from smart_search_engine import SmartSearchEngine
        
        search_engine = SmartSearchEngine()
        
        queries = [
            "–≤–∏—Ç–∞–º–∏–Ω –°",
            "vitamin c", 
            "–∞—Å–∫–æ—Ä–±–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞",
            "–æ—Ä–∞–Ω–∂ —Ç–∞–±—Å",
            "—Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏—Ç–∞–º–∏–Ω —Å"
        ]
        
        for query in queries:
            print(f"\nüîç –ó–∞–ø—Ä–æ—Å: '{query}'")
            results = search_engine.search(query)
            
            if results:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(results)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                for r in results[:3]:
                    print(f"      ‚Ä¢ {r.product_name} (score: {r.score:.1f})")
            else:
                print(f"   ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")

if __name__ == "__main__":
    # –ò—â–µ–º –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –±–∞–∑–∞—Ö
    products = find_vitamin_c_products()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata_products = check_metadata_for_vitamin_c()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫
    test_vitamin_c_search()





