#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re

def check_file_content(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Aurora
        other_project_indicators = [
            # –î—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤
            'aurora assistant',
            'aurora helper',
            'aurora support',
            # –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            'order',
            '–∑–∞–∫–∞–∑',
            'payment',
            '–æ–ø–ª–∞—Ç–∞',
            'delivery',
            '–¥–æ—Å—Ç–∞–≤–∫–∞',
            'shipping',
            'cart',
            '–∫–æ—Ä–∑–∏–Ω–∞',
            # –î—Ä—É–≥–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            'django',
            'flask',
            'fastapi',
            'sqlalchemy',
            'postgresql',
            'mysql',
            # –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã
            'stripe',
            'paypal',
            'yandex.money',
            'qiwi',
            # –î—Ä—É–≥–∏–µ API
            'telegram bot api',
            'botfather',
            # –î—Ä—É–≥–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            'models.py',
            'views.py',
            'urls.py',
            'settings.py',
            'admin.py',
            'forms.py',
            'serializers.py',
            # –î—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            'dockerfile',
            'docker-compose',
            'kubernetes',
            'helm',
            # –î—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã
            'pytest',
            'unittest',
            'test_',
            'spec_',
            # –î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            'api.md',
            'deployment.md',
            'architecture.md',
            'design.md'
        ]
        
        content_lower = content.lower()
        for indicator in other_project_indicators:
            if indicator in content_lower:
                return True
        
        return False
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return False

def check_filename_suspicious(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤"""
    filename = os.path.basename(file_path).lower()
    
    suspicious_patterns = [
        # –î—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
        'shop',
        'store',
        'ecommerce',
        'marketplace',
        'order',
        'payment',
        'delivery',
        'cart',
        'checkout',
        'billing',
        # –î—Ä—É–≥–∏–µ –±–æ—Ç—ã
        'assistant',
        'helper',
        'support',
        'chatbot',
        # –î—Ä—É–≥–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        'django',
        'flask',
        'fastapi',
        'react',
        'vue',
        'angular',
        # –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        'stripe',
        'paypal',
        'yandex',
        'qiwi',
        # –î—Ä—É–≥–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        'docker',
        'kubernetes',
        'helm',
        'terraform',
        'ansible',
        # –î—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã
        'spec_',
        'test_',
        'unit_',
        'integration_',
        'e2e_',
        # –î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        'api_',
        'deployment_',
        'architecture_',
        'design_',
        'specification_'
    ]
    
    for pattern in suspicious_patterns:
        if pattern in filename:
            return True
    
    return False

def analyze_project():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç"""
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê –ù–ê –ü–†–ï–î–ú–ï–¢ –ß–£–ñ–ò–• –§–ê–ô–õ–û–í")
    print("=" * 60)
    
    suspicious_files = []
    normal_files = []
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    for root, dirs, files in os.walk('.'):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º .git –∏ __pycache__
        if '.git' in root or '__pycache__' in root:
            continue
            
        for file in files:
            file_path = os.path.join(root, file)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
            if file.endswith(('.db', '.pyc', '.exe', '.dll', '.so')):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            is_suspicious = check_filename_suspicious(file_path) or check_file_content(file_path)
            
            if is_suspicious:
                suspicious_files.append(file_path)
            else:
                normal_files.append(file_path)
    
    print(f"‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(normal_files)}")
    print(f"‚ùå –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(suspicious_files)}")
    
    print("\nüìÅ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –§–ê–ô–õ–´ (–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞):")
    print("-" * 60)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
    extensions = {}
    for file_path in suspicious_files:
        ext = os.path.splitext(file_path)[1]
        if ext not in extensions:
            extensions[ext] = []
        extensions[ext].append(file_path)
    
    for ext, files in sorted(extensions.items()):
        print(f"\n{ext.upper()} —Ñ–∞–π–ª—ã ({len(files)}):")
        for file_path in sorted(files):
            print(f"  - {file_path}")
    
    return suspicious_files

if __name__ == "__main__":
    suspicious_files = analyze_project()
    
    print(f"\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–û: {len(suspicious_files)} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print("–≠—Ç–∏ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Aurora!")
