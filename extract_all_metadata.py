#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
from metadata_structure import MetadataExtractor, ProductMetadata
from typing import List, Dict

def extract_all_products_metadata():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    
    print("üîç –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–• –ò–ó –í–°–ï–• –ü–†–û–î–£–ö–¢–û–í")
    print("="*60)
    
    extractor = MetadataExtractor()
    all_metadata = []
    
    # –ß–∏—Ç–∞–µ–º –æ–±–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    knowledge_files = ['knowledge_base.json', 'knowledge_base_new.json']
    
    for kb_file in knowledge_files:
        print(f"\nüìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {kb_file}...")
        
        try:
            with open(kb_file, 'r', encoding='utf-8') as f:
                kb_data = json.load(f)
            
            print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(kb_data)}")
            
            for i, product in enumerate(kb_data):
                try:
                    metadata = extractor.extract_metadata(product)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                    metadata_dict = {
                        'source_file': kb_file,
                        'product_name': metadata.product_name,
                        'category': metadata.category.value,
                        'form': metadata.form.value,
                        'target_group': metadata.target_group.value,
                        'health_indications': [ind.value for ind in metadata.health_indications],
                        'main_components': metadata.main_components,
                        'properties': metadata.properties,
                        'contraindications': metadata.contraindications,
                        'dosage_form': metadata.dosage_form,
                        'original_data': product  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    }
                    
                    all_metadata.append(metadata_dict)
                    
                    if (i + 1) % 10 == 0:
                        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + 1}/{len(kb_data)}")
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {product.get('product', 'Unknown')}: {e}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {kb_file}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = 'products_metadata.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(all_metadata, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(all_metadata)}")
    
    return all_metadata

def analyze_metadata(metadata_list: List[Dict]):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –ú–ï–¢–ê–î–ê–ù–ù–´–•")
    print("="*60)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    forms = {}
    indications = {}
    properties = {}
    
    for item in metadata_list:
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = item['category']
        categories[category] = categories.get(category, 0) + 1
        
        # –§–æ—Ä–º—ã –≤—ã–ø—É—Å–∫–∞
        form = item['form']
        forms[form] = forms.get(form, 0) + 1
        
        # –ü–æ–∫–∞–∑–∞–Ω–∏—è
        for indication in item['health_indications']:
            indications[indication] = indications.get(indication, 0) + 1
        
        # –°–≤–æ–π—Å—Ç–≤–∞
        for prop in item['properties']:
            properties[prop] = properties.get(prop, 0) + 1
    
    print(f"\nüìã –ö–ê–¢–ï–ì–û–†–ò–ò –ü–†–û–î–£–ö–¢–û–í:")
    for category, count in sorted(categories.items(), key=lambda x: x[1], reverse=True):
        print(f"   {category}: {count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    print(f"\nüíä –§–û–†–ú–´ –í–´–ü–£–°–ö–ê:")
    for form, count in sorted(forms.items(), key=lambda x: x[1], reverse=True):
        print(f"   {form}: {count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    print(f"\nüéØ –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–ù–ò–Ø:")
    for indication, count in sorted(indications.items(), key=lambda x: x[1], reverse=True)[:10]:
        print(f"   {indication}: {count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    print(f"\n‚ö° –û–°–ù–û–í–ù–´–ï –°–í–û–ô–°–¢–í–ê:")
    for prop, count in sorted(properties.items(), key=lambda x: x[1], reverse=True):
        print(f"   {prop}: {count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print(f"\nüîç –ü–†–ò–ú–ï–†–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    for category in list(categories.keys())[:5]:
        examples = [item['product_name'] for item in metadata_list 
                   if item['category'] == category][:3]
        print(f"   {category}: {', '.join(examples)}")

def find_products_by_criteria(metadata_list: List[Dict], **criteria):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
    
    print(f"\nüîé –ü–û–ò–°–ö –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú: {criteria}")
    print("-" * 40)
    
    filtered_products = []
    
    for item in metadata_list:
        match = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π
        for key, value in criteria.items():
            if key == 'category' and item['category'] != value:
                match = False
                break
            elif key == 'form' and item['form'] != value:
                match = False
                break
            elif key == 'indication' and value not in item['health_indications']:
                match = False
                break
            elif key == 'property' and value not in item['properties']:
                match = False
                break
            elif key == 'component' and not any(value.lower() in comp.lower() 
                                               for comp in item['main_components']):
                match = False
                break
        
        if match:
            filtered_products.append(item)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(filtered_products)}")
    
    for product in filtered_products[:10]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        print(f"   ‚Ä¢ {product['product_name']} ({product['category']})")
        if product['properties']:
            print(f"     –°–≤–æ–π—Å—Ç–≤–∞: {', '.join(product['properties'])}")
    
    return filtered_products

if __name__ == "__main__":
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = extract_all_products_metadata()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    analyze_metadata(metadata)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    print(f"\n" + "="*60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –ü–û –ú–ï–¢–ê–î–ê–ù–ù–´–ú")
    print("="*60)
    
    # –¢–µ—Å—Ç 1: –í—Å–µ –≥–µ–ø–∞—Ç–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä—ã
    find_products_by_criteria(metadata, category='–ì–µ–ø–∞—Ç–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä—ã')
    
    # –¢–µ—Å—Ç 2: –í—Å–µ —Å–æ—Ä–±–µ–Ω—Ç—ã
    find_products_by_criteria(metadata, property='—Å–æ—Ä–±–µ–Ω—Ç')
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø–µ—á–µ–Ω–∏
    find_products_by_criteria(metadata, indication='–ø–µ—á–µ–Ω—å')
    
    # –¢–µ—Å—Ç 4: –ö–∞–ø—Å—É–ª—ã —Å –º–∞–≥–Ω–∏–µ–º
    find_products_by_criteria(metadata, form='–∫–∞–ø—Å—É–ª—ã', component='–º–∞–≥–Ω–∏–π')
    
    print(f"\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")





