# bot.py
import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ChatAction
import json

from dotenv import load_dotenv

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
WELCOME_PHOTO_ID = "AgACAgIAAxkBAAID2Gike91mECS1PIS7qfib1Fc7LwdOAAIy_DEbyo8gSRO7zGsoAaAFAQADAgADeAADNgQ"
MENU_PHOTO_ID = "AgACAgIAAxkBAAID1mike8kt0PGUNNoU9U4abT45A8nhAAIx_DEbyo8gSX4-GaO4NzKhAQADAgADeAADNgQ"

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
try:
    from database import init_db, add_user, log_user_action, get_all_user_ids
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å database –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏")
    def init_db(): pass
    def add_user(user_id, username, full_name): pass
    def log_user_action(user_id, action): pass
    def get_all_user_ids(): return []

# –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
try:
    from local_logger import log_user_question_local
    LOCAL_LOGGING_ENABLED = True
    print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å local_logger –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    def log_user_question_local(user_id, username, question): pass
    LOCAL_LOGGING_ENABLED = False

try:
    # –ù–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
    from enhanced_vector_db import enhanced_vector_db
    from enhanced_llm import enhanced_llm
    from nlp_processor import nlp_processor, Intent
    from product_recommendations import recommendation_manager
    AI_ENABLED = True
    
    # –°—Ç–∞—Ä—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    try:
        from vector_db import client, model, start_auto_update as old_start_auto_update
        from llm import ask_llm as old_ask_llm
    except ImportError:
        pass
        
except ImportError:
    print("‚ö†Ô∏è AI –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ò–ò")
    AI_ENABLED = False
    def enhanced_llm_process_query(question): return "AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

load_dotenv()

def smart_truncate_text(text: str, max_length: int) -> str:
    """–£–º–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∞–±–∑–∞—Ü–µ–≤"""
    if len(text) <= max_length:
        return text
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    truncated = text[:max_length]
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:
    # 1. –ö–æ–Ω–µ—Ü –∞–±–∑–∞—Ü–∞ (–¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏)
    # 2. –ö–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Ç–æ—á–∫–∞, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫)
    # 3. –ö–æ–Ω–µ—Ü —Å–ª–æ–≤–∞ (–ø—Ä–æ–±–µ–ª)
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü
    last_paragraph = truncated.rfind('\n\n')
    if last_paragraph > max_length * 0.6:  # –ï—Å–ª–∏ –∞–±–∑–∞—Ü –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        return truncated[:last_paragraph].strip()
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    sentence_endings = ['. ', '! ', '? ', '.\n', '!\n', '?\n']
    best_sentence_end = -1
    for ending in sentence_endings:
        pos = truncated.rfind(ending)
        if pos > best_sentence_end:
            best_sentence_end = pos
    
    if best_sentence_end > max_length * 0.7:  # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
        return truncated[:best_sentence_end + 1].strip()
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
    last_space = truncated.rfind(' ')
    if last_space > max_length * 0.8:  # –ï—Å–ª–∏ –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        return truncated[:last_space].strip()
    
    # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ–±—Ä–µ–∑–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return truncated.strip()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = set()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ—à–∞–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
user_recommendations = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ")
user_full_answers = {}  # user_id: full_answer_text

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
user_product_context = {}  # user_id: [{"name": "–ê—Ä–≥–µ–Ω—Ç –ú–∞–∫—Å", "url": "...", "image_id": "..."}, ...]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É"
users_waiting_for_natalya = set()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—É—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ù–∞—Ç–∞–ª–∏–∏
admin_replying_to = {}  # admin_message_id: user_id - –¥–ª—è —Å–≤—è–∑–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
user_product_carousels = {}  # user_id: {"products": [...], "current_index": 0, "message_id": ...}

# –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã
if AI_ENABLED:
    # –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    try:
        enhanced_vector_db.index_knowledge()
    except Exception as e:
        print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
    enhanced_vector_db.start_auto_update()

async def send_typing_action(chat_id: int, duration: float = 1.0):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        await bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await asyncio.sleep(duration)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ typing action: {e}")

def main_menu():
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üíö", url="https://aur-ora.com/auth/registration/666282189484")],
        [InlineKeyboardButton(text="üìã –ö–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", url="https://aur-ora.com/catalog/vse_produkty")],
        [InlineKeyboardButton(text="üìç –ê–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="check_city")],
        [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É", callback_data="write_to_natalya")]
    ])
    return markup

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    users.add(user_id)
    add_user(user_id, message.from_user.username, message.from_user.full_name)
    log_user_action(user_id, "start")
    
    await message.answer_photo(
        photo=WELCOME_PHOTO_ID,
        caption="–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∞—Ç–∞–ª—å—è –ö—É–º–∞—Å–∏–Ω—Å–∫–∞—è. –Ø —è–≤–ª—è—é—Å—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –∫–æ–º–ø–∞–Ω–∏–∏ –ê–≤—Ä–æ—Ä–∞ –∏ –¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –ê–≤—Ä–æ—Ä—ã. "
                "–•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —ç—Ç–æ–π —Ñ–∏—Ä–º—ã"
    )
    
    await asyncio.sleep(2)
    
    await message.answer_photo(
        photo=MENU_PHOTO_ID,
        caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
        reply_markup=main_menu()
    )

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    log_user_action(message.from_user.id, "open_menu")
    await message.answer_photo(
        photo=MENU_PHOTO_ID,
        caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
        reply_markup=main_menu()
    )

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")]
    ])
    
    await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markup)



@dp.callback_query(lambda c: c.data == "write_to_natalya")
async def write_to_natalya(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    log_user_action(user_id, "write_to_natalya")
    
    # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ù–∞—Ç–∞–ª–∏–∏
    users_waiting_for_natalya.add(user_id)
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_natalya")]
    ])
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    await callback_query.message.delete()
    await callback_query.message.answer(
        "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –ù–∞—Ç–∞–ª—å–µ.\n"
        "–û–Ω–∞ –ª–∏—á–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n"
        "üí¨ –û–∂–∏–¥–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
        reply_markup=markup
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "cancel_natalya")
async def cancel_natalya(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    users_waiting_for_natalya.discard(user_id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    await callback_query.message.delete()
    await callback_query.message.answer_photo(
        photo=MENU_PHOTO_ID,
        caption="‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–∞—Ç–∞–ª—å–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=main_menu()
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "check_city")
async def check_city(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    log_user_action(user_id, "check_city")
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–æ—Å–∫–≤–∞", callback_data="city_moscow"), 
         InlineKeyboardButton(text="–°–ü–±", callback_data="city_spb")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="city_other")]
    ])
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    await callback_query.message.delete()
    await callback_query.message.answer(
        "üè™ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤:",
        reply_markup=markup
    )
    await callback_query.answer()



@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –°–Ω–∏–º–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ù–∞—Ç–∞–ª–∏–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–∫–ª—é—á–µ–Ω
    users_waiting_for_natalya.discard(user_id)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    await callback_query.message.delete()
    await callback_query.message.answer_photo(
        photo=MENU_PHOTO_ID,
        caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
        reply_markup=main_menu()
    )
    await callback_query.answer()

@dp.message(lambda message: message.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id"""
    if message.from_user.id != ADMIN_ID:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_id = photo.file_id
    
    await message.reply(
        f"üì∑ File ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:\n\n<code>{file_id}</code>\n\n"
        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ knowledge_base.json "
        f"–≤ –ø–æ–ª–µ image_id –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.",
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback_query.message.edit_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
        reply_markup=markup
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "admin_back")
async def admin_back(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
        
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")]
    ])
    
    await callback_query.message.edit_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markup)
    await callback_query.answer()

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–∞—Ç–∞–ª—å–µ
    if user_id in users_waiting_for_natalya:
        await handle_message_to_natalya(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Å—Å—ã–ª–∫–µ
    if text.lower() in ["–¥–∞", "–¥–∞ –Ω—É–∂–Ω–∞", "–Ω—É–∂–Ω–∞", "–¥–∞, –Ω—É–∂–Ω–∞"]:
        await handle_link_request_confirmation(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–º—ã
    additional_request_patterns = [
        "—á—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å –µ—â–µ", "—á—Ç–æ –µ—â–µ", "–µ—â–µ —á—Ç–æ", "—á—Ç–æ-—Ç–æ –µ—â–µ", "–µ—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
        "—á—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å –µ—â—ë", "—á—Ç–æ –µ—â—ë", "–µ—â—ë —á—Ç–æ", "—á—Ç–æ-—Ç–æ –µ—â—ë", "–µ—â—ë –ø—Ä–æ–¥—É–∫—Ç—ã",
        "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —á—Ç–æ", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ", "–¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"
    ]
    if any(pattern in text.lower() for pattern in additional_request_patterns):
        await handle_additional_recommendations(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Å—ã–ª–∫—É
    link_indicators = ["—Å—Å—ã–ª–∫–∞", "—Å—Å—ã–ª–∫–∏", "—Å—Å—ã–ª–æ—á–∫—É", "–ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É", "–¥–∞–π —Å—Å—ã–ª–∫—É", "–ø–æ–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É", "–≥–¥–µ –∫—É–ø–∏—Ç—å", "–∫—É–ø–∏—Ç—å"]
    if any(indicator in text.lower() for indicator in link_indicators):
        await handle_product_link_request(message, None)
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–∏ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
    if user_id in user_product_context:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        question_indicators = ["—á—Ç–æ", "–∫–∞–∫–∏–µ", "–∫–∞–∫", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "—Ä–∞—Å—Å–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏", "–µ—Å—Ç—å –ª–∏", "–ø–æ—Å–æ–≤–µ—Ç—É–π", "–Ω—É–∂–Ω–æ", "—Ö–æ—á—É", "–¥–ª—è"]
        is_new_question = any(indicator in text.lower() for indicator in question_indicators)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ - —ç—Ç–æ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        if len(text) > 15 and is_new_question:
            del user_product_context[user_id]
        # –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±–∏—Ä–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç
        elif len(text) < 50:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
            if text.isdigit() or any(word.lower() in text.lower() for word in [
                "–∞—Ä–≥–µ–Ω—Ç", "–≥–µ–ø–æ—Å–∏–Ω", "—Å–∏–º–±–∏–æ–Ω", "–µ–ª–æ–º–∏–ª", "bwl", "—á–µ—Ä–Ω–æ–≥–æ –æ—Ä–µ—Ö–∞", "—Å–æ–ª–±–µ—Ä—Ä–∏", "–±–∏—Ç–µ—Ä–æ–Ω",
                "–∫–æ—à–∞—á–∏–π", "–∫–æ–≥–æ—Ç—å", "–∏–Ω-–∞—É—Ä–∏–Ω", "–±–∞—Ä—Å", "bars", "—Å–∏-—ç–Ω–µ—Ä–∂–∏", "–≤–∏—Ç–∞–º–∏–Ω", "–æ—Ä–∞–Ω–∂"
            ]):
                await handle_product_selection(message)
                return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id == ADMIN_ID and message.reply_to_message:
        await handle_admin_reply(message)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
    if len(text) < 3:
        return
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
    greetings = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Ö–∞–π", "hello", "hi", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ"]
    if any(greeting in text.lower() for greeting in greetings):
        
        # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
        await send_typing_action(user_id, 2.0)
        
        await message.reply(
            "üåø **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä AURORA!** üëã\n\n"
            "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º –∑–¥–æ—Ä–æ–≤—å—è. "
            "–ó–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã –Ω–∞–π–¥—É –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è!\n\n"
            
            "üß† **–ú–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å:**\n"
            "‚Ä¢ **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π AURORA** ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é 98+ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ **–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥** ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–∏–Ω–µ—Ä–≥–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n"
            "‚Ä¢ **100% –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å** ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Å–∞–π—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏\n"
            "‚Ä¢ **–ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏** ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—é —Ñ–æ—Ç–æ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä\n"
            "‚Ä¢ **–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å** ‚Äî —É—á–∏—Ç—ã–≤–∞—é –∏–º–µ–Ω–Ω–æ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n\n"
            
            "üíé **–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
            "‚úÖ **–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏** ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–º–µ—Å—Ç–æ —á–∞—Å–æ–≤ –ø–æ–∏—Å–∫–∞\n"
            "‚úÖ **–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å** ‚Äî –∑–Ω–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ –∫–∞—Ä–º–∞–Ω–µ\n"
            "‚úÖ **–¢–æ—á–Ω–æ—Å—Ç—å** ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
            "‚úÖ **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å** ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ 24/7 –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
            
            "üéØ **–†–µ—à–∞—é —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\n"
            "üî∏ **–ó–¥–æ—Ä–æ–≤—å–µ:** \"*–£ —Ä–µ–±–µ–Ω–∫–∞ –±—Ä–æ–Ω—Ö–∏—Ç, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç?*\"\n"
            "üî∏ **–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞:** \"*–ß—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–ª—è –∫—Ä–µ–ø–∫–æ–≥–æ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞?*\"\n"
            "üî∏ **–ü—Ä–æ–±–ª–µ–º—ã:** \"*–ü–µ—á–µ–Ω—å –ø–æ—Å–ª–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å*\"\n"
            "üî∏ **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:** \"*–•–ª–æ—Ä–æ—Ñ–∏–ª–ª –∏–ª–∏ –î–µ—Ç–æ–∫—Å ‚Äî —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ?*\"\n"
            "üî∏ **–ö—Ä–∞—Å–æ—Ç–∞:** \"*–•–æ—á—É –∑–¥–æ—Ä–æ–≤—É—é –∫–æ–∂—É –∏ –≤–æ–ª–æ—Å—ã –∏–∑–Ω—É—Ç—Ä–∏*\"\n"
            "üî∏ **–≠–Ω–µ—Ä–≥–∏—è:** \"*–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å, —á—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å?*\"\n"
            "üî∏ **–°—Å—ã–ª–∫–∏:** \"*–î–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ –°–æ–ª–±–µ—Ä—Ä–∏*\" –∏–ª–∏ \"*–ì–¥–µ –∫—É–ø–∏—Ç—å –•–ª–æ—Ä–æ—Ñ–∏–ª–ª?*\"\n\n"
            
            "üöÄ **–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**\n"
            "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∑–∞–¥–∞—á—É –æ–±—ã—á–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ ‚Äî —è –ø–æ–π–º—É –∏ –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç!\n\n"
            
            "üí¨ *–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –æ—Ç —Å—Ç—Ä–µ—Å—Å–∞\" –∏–ª–∏ \"–í–∏—Ç–∞–º–∏–Ω—ã –¥–ª—è –∂–µ–Ω—â–∏–Ω –ø–æ—Å–ª–µ 40\"*\n\n"
            
            "üí° **–ó–∞–±—ã–ª–∏ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏?** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ *\"–ü—Ä–∏–≤–µ—Ç\"* ‚Äî —è –Ω–∞–ø–æ–º–Ω—é –æ–±–æ –≤—Å–µ–º, —á—Ç–æ —É–º–µ—é!",
            parse_mode="Markdown"
        )
        return
    
    log_user_action(user_id, f"asked: {text[:50]}...")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if LOCAL_LOGGING_ENABLED:
        username = message.from_user.username or message.from_user.full_name or "Unknown"
        log_user_question_local(user_id, username, text)
    
    # –ï—Å–ª–∏ AI –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    if AI_ENABLED:
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π NLP –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            processed_message = nlp_processor.process_message(text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            intent_info = f"Intent: {processed_message.intent.value}, Sentiment: {processed_message.sentiment}"
            if processed_message.entities:
                entities_info = ", ".join([f"{e.label}: {e.text}" for e in processed_message.entities])
                intent_info += f", Entities: {entities_info}"
            log_user_action(user_id, intent_info)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            # –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (Reply)
            if processed_message.intent == Intent.PRODUCT_SELECTION and message.reply_to_message:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
                text_lower = text.lower()
                is_full_assortment_request = any(phrase in text_lower for phrase in [
                    "–≤–µ—Å—å", "–≤—Å–µ", "–≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", "–≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã", "–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫"
                ])
                
                if is_full_assortment_request:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
                    all_products = recommendation_manager.get_recommendations(
                        processed_message.expanded_query, limit=10
                    )
                    
                    if all_products:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_product_context[user_id] = all_products
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                        await send_all_products_list(message, all_products)
                        return
                
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if processed_message.intent == Intent.REGISTRATION:
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ", 
                        url="https://aur-ora.com/auth/registration/666282189484/"
                    )],
                    [InlineKeyboardButton(
                        text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É", 
                        callback_data="write_to_natalya"
                    )]
                ])
                
                # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
                await send_typing_action(user_id, 2.0)
                
                await message.reply(
                    "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ê–í–†–û–†–ê\n\n"
                    "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∫–∏–¥–æ–∫ "
                    "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.\n\n"
                    "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
                    "‚Ä¢ üí∞ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏\n"
                    "‚Ä¢ üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤\n"
                    "‚Ä¢ üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
                    "‚Ä¢ üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è\n\n"
                    "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.",
                    reply_markup=markup
                )
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã
            if processed_message.intent == Intent.PRODUCT_LINK:
                await handle_product_link_request(message, processed_message)
                return
            
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π LLM –æ—Ç–≤–µ—Ç
            # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
            await send_typing_action(user_id, 1.5)
            
            llm_result = enhanced_llm.process_query(text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª –ª–∏ LLM –∫–æ—Ä—Ç–µ–∂ (–æ—Ç–≤–µ—Ç + –∫–æ–Ω—Ç–µ–∫—Å—Ç) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç
            if isinstance(llm_result, tuple) and len(llm_result) == 2:
                answer, products_context = llm_result
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–± –∏–º–º—É–Ω–∏—Ç–µ—Ç–µ)
                user_product_context[user_id] = products_context
            else:
                answer = llm_result
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                extracted_products = extract_products_from_answer(answer)
                if extracted_products:
                    user_product_context[user_id] = extracted_products
                else:
                    # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    user_product_context.pop(user_id, None)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            has_no_info_phrases = any(phrase in answer.lower() for phrase in [
                "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏", "–∏–∑–≤–∏–Ω–∏—Ç–µ", "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É", "–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—Ç–∞–ª—å–µ"
            ])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–µ–∑–∞—Ç—å –æ—Ç–≤–µ—Ç
            full_answer = answer
            is_truncated = len(answer) > 999
            
            if is_truncated:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ"
                user_full_answers[user_id] = full_answer
                
                # –£–º–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                answer = smart_truncate_text(answer, 999)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞
            markup_buttons = []
            
            if is_truncated:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ"
                markup_buttons.append([InlineKeyboardButton(
                    text="üìñ –ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ", 
                    callback_data=f"read_more_{user_id}"
                )])
            
            if has_no_info_phrases:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                markup_buttons.append([InlineKeyboardButton(
                    text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É", 
                    callback_data="write_to_natalya"
                )])
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
            markup = InlineKeyboardMarkup(inline_keyboard=markup_buttons) if markup_buttons else None
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.reply(answer, reply_markup=markup)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∂–∞–ª–æ–±–∞ –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            if (processed_message.intent == Intent.COMPLAINT or 
                processed_message.sentiment == "negative"):
                
                if ADMIN_ID:
                    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
                    await bot.send_message(
                        ADMIN_ID,
                        f"üö® –ü–†–ò–û–†–ò–¢–ï–¢ - –ñ–∞–ª–æ–±–∞ –æ—Ç {username} (ID: {user_id}):\n\n"
                        f"–û—Ä–∏–≥–∏–Ω–∞–ª: {text}\n\n"
                        f"–ê–Ω–∞–ª–∏–∑: {intent_info}\n\n"
                        f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞: {answer[:200]}..."
                    )
            
            return
            
        except Exception as e:
            print(f"Enhanced AI –æ—à–∏–±–∫–∞: {e}")
            
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ –Ω–æ–≤—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            try:
                if hasattr(globals(), 'client') and hasattr(globals(), 'model'):
                    query_vector = model.encode(text).tolist()
                    results = client.search("aurora_knowledge", query_vector, limit=2)

                    if results:
                        context = "\n\n---\n\n".join([
                            f"–ü—Ä–æ–¥—É–∫—Ç: {hit.payload['product']}\n"
                            f"–û–ø–∏—Å–∞–Ω–∏–µ: {hit.payload['description']}\n"
                            f"–ü–æ–ª—å–∑–∞: {', '.join(hit.payload['benefits'])}\n"
                            f"–°–æ—Å—Ç–∞–≤: {hit.payload['composition']}\n"
                            f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {hit.payload['dosage']}\n"
                            f"–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è: {hit.payload['contraindications']}"
                            for hit in results
                        ])

                        if hasattr(globals(), 'old_ask_llm'):
                            answer = old_ask_llm(text, context)
                            await message.reply(answer)
                            return
            except Exception as fallback_error:
                print(f"Fallback AI –æ—à–∏–±–∫–∞: {fallback_error}")
    
    # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ AI
    await message.reply(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ù–∞—Ç–∞–ª—å–µ, –æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç."
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    if ADMIN_ID:
        username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
        await bot.send_message(
            ADMIN_ID,
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} (ID: {user_id}):\n\n{text}"
        )

async def handle_message_to_natalya(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ù–∞—Ç–∞–ª—å–µ"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    users_waiting_for_natalya.discard(user_id)
    
    if not text:
        await message.reply("‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    user_info = f"{message.from_user.full_name}"
    if message.from_user.username:
        user_info += f" (@{message.from_user.username})"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_ID:
        try:
            # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
            await send_typing_action(user_id, 1.0)
            
            admin_message = await bot.send_message(
                ADMIN_ID,
                f"üíå <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                f"üë§ <b>–û—Ç:</b> {user_info}\n"
                f"üÜî <b>ID:</b> <code>{user_id}</code>\n\n"
                f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{text}\n\n"
                f"üí° _–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (Reply), —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é_",
                parse_mode="HTML"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            admin_replying_to[admin_message.message_id] = user_id
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            markup = None
            
            await message.reply(
                "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É!</b>\n\n"
                "–û–Ω–∞ –ø–æ–ª—É—á–∏–ª–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                "–û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤–∞–º –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
                reply_markup=markup,
                parse_mode="HTML"
            )
            
            log_user_action(user_id, f"sent_to_natalya: {text[:50]}...")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            await message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
    else:
        await message.reply(
            "‚ùå –ù–∞—Ç–∞–ª—å—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ."
        )

async def handle_admin_reply(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not message.reply_to_message:
        return
    
    replied_message_id = message.reply_to_message.message_id
    
    # –ù–∞—Ö–æ–¥–∏–º, –∫–æ–º—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –æ—Ç–≤–µ—Ç
    if replied_message_id in admin_replying_to:
        target_user_id = admin_replying_to[replied_message_id]
        admin_response = message.text.strip()
        
        if not admin_response:
            await message.reply("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë", callback_data="write_to_natalya")]
            ])
            
            await bot.send_message(
                target_user_id,
                f"üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –ù–∞—Ç–∞–ª–∏–∏:</b>\n\n{admin_response}",
                reply_markup=markup,
                parse_mode="HTML"
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω—É
            await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
            
            # –£–±–∏—Ä–∞–µ–º —Å–≤—è–∑—å, —Ç–∞–∫ –∫–∞–∫ –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
            del admin_replying_to[replied_message_id]
            
            log_user_action(target_user_id, f"received_reply_from_natalya: {admin_response[:50]}...")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞, –Ω–µ –æ—Ç–≤–µ—Ç
        pass

async def send_recommendation(message: types.Message, user_id: int, recommendation_index: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if user_id not in user_recommendations:
        await message.reply("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
        return
    
    recommendations = user_recommendations[user_id]
    
    if recommendation_index < 1 or recommendation_index > len(recommendations):
        await message.reply("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
    await send_typing_action(user_id, 2.0)
    
    recommendation = recommendations[recommendation_index - 1]
    current = recommendation_index
    total = len(recommendations)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text, image_id = recommendation_manager.format_recommendation_message(
        recommendation, current, total
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = recommendation_manager.create_recommendation_keyboard(
        user_id, current, total, recommendation.url
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if image_id and image_id.strip():
        try:
            await message.answer_photo(
                photo=image_id,
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {image_id}: {e}")
            # Fallback –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            await message.reply(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    else:
        await message.reply(
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

async def send_recommendation_edit(callback_query: types.CallbackQuery, user_id: int, recommendation_index: int):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)"""
    if user_id not in user_recommendations:
        await callback_query.answer("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    recommendations = user_recommendations[user_id]
    
    if recommendation_index < 1 or recommendation_index > len(recommendations):
        await callback_query.answer("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    recommendation = recommendations[recommendation_index - 1]
    current = recommendation_index
    total = len(recommendations)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text, image_id = recommendation_manager.format_recommendation_message(
        recommendation, current, total
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = recommendation_manager.create_recommendation_keyboard(
        user_id, current, total, recommendation.url
    )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback_query.message.photo and image_id and image_id.strip():
            await callback_query.message.answer_photo(
                photo=image_id,
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.delete()
        elif image_id and image_id.strip():
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            await callback_query.message.answer_photo(
                photo=image_id,
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback_query.message.delete()
        else:
            # –ü—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await callback_query.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
@dp.callback_query(lambda c: c.data.startswith("rec_next_"))
async def handle_next_recommendation(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–∏–π'"""
    try:
        _, _, user_id_str, index_str = callback_query.data.split("_")
        user_id = int(user_id_str)
        index = int(index_str)
        
        if callback_query.from_user.id != user_id:
            await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", show_alert=True)
            return
        
        await send_recommendation_edit(callback_query, user_id, index)
        await callback_query.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_next_recommendation: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("rec_prev_"))
async def handle_prev_recommendation(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥—ã–¥—É—â–∏–π'"""
    try:
        _, _, user_id_str, index_str = callback_query.data.split("_")
        user_id = int(user_id_str)
        index = int(index_str)
        
        if callback_query.from_user.id != user_id:
            await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", show_alert=True)
            return
        
        await send_recommendation_edit(callback_query, user_id, index)
        await callback_query.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_prev_recommendation: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("read_more_"))
async def handle_read_more(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ'"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data
        user_id_str = callback_query.data.replace("read_more_", "")
        user_id = int(user_id_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ–π –æ—Ç–≤–µ—Ç
        if callback_query.from_user.id != user_id:
            await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
        if user_id in user_full_answers:
            full_answer = user_full_answers[user_id]
            
            # –ù–∞—Ö–æ–¥–∏–º –≥–¥–µ –æ–±—Ä–µ–∑–∞–ª–∏ —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ç—É –∂–µ —É–º–Ω—É—é –ª–æ–≥–∏–∫—É
            first_part = smart_truncate_text(full_answer, 999)
            first_part_length = len(first_part)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
            remaining_text = full_answer[first_part_length:].strip()
            
            if remaining_text:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
                await callback_query.message.reply(remaining_text)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏
                del user_full_answers[user_id]
                
                await callback_query.answer("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                await callback_query.answer("–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞", show_alert=True)
        else:
            await callback_query.answer("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_read_more: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("carousel_prev_"))
async def handle_carousel_prev(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –∫–∞—Ä—É—Å–µ–ª–∏"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ index –∏–∑ callback_data
        parts = callback_query.data.split("_")
        user_id = int(parts[2])
        new_index = int(parts[3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ—é –∫–∞—Ä—É—Å–µ–ª—å
        if callback_query.from_user.id != user_id:
            await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–∞—Ä—É—Å–µ–ª—å", show_alert=True)
            return
        
        await update_product_carousel(callback_query, user_id, new_index)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_carousel_prev: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("carousel_next_"))
async def handle_carousel_next(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–ø–µ—Ä–µ–¥' –≤ –∫–∞—Ä—É—Å–µ–ª–∏"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ index –∏–∑ callback_data
        parts = callback_query.data.split("_")
        user_id = int(parts[2])
        new_index = int(parts[3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ—é –∫–∞—Ä—É—Å–µ–ª—å
        if callback_query.from_user.id != user_id:
            await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–∞—Ä—É—Å–µ–ª—å", show_alert=True)
            return
        
        await update_product_carousel(callback_query, user_id, new_index)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_carousel_next: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data == "carousel_info")
async def handle_carousel_info(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–∞—Ä—É—Å–µ–ª–∏"""
    await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏", show_alert=False)

async def handle_product_link_request(message: types.Message, processed_message=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
    user_id = message.from_user.id
    
    try:
        # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        import json
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –±—ã–ª –ª–∏ —É–ø–æ–º—è–Ω—É—Ç –ø—Ä–æ–¥—É–∫—Ç —Ä–∞–Ω–µ–µ
        context_product = None
        if user_id in user_product_context:
            context_products = user_product_context[user_id]
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç - —Å–ø–∏—Å–æ–∫, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
            if isinstance(context_products, list) and context_products:
                context_product = context_products[0]
            elif isinstance(context_products, dict):
                context_product = context_products
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
        product_name = ""
        if processed_message is not None and hasattr(processed_message, 'entities') and processed_message.entities:
            for entity in processed_message.entities:
                if entity.label == "PRODUCT":
                    product_name = entity.text
                    break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å—É—â–Ω–æ—Å—Ç—è—Ö, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        if not product_name:
            text_words = message.text.lower().split()
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
            meaningful_words = [word for word in text_words if len(word) > 2 and word not in 
                               ["—Å—Å—ã–ª–∫—É", "–ø—Ä–∏—à–ª–∏", "–¥–∞–π", "–ø–æ–∫–∞–∂–∏", "–Ω—É–∂–Ω–∞", "—Ö–æ—á—É", "–≥–¥–µ", "–∫–∞–∫", "–º–æ–∂–Ω–æ", "–µ—Å—Ç—å", "–Ω–∞", "–≤–∞—à–µ–º", "—Å–∞–π—Ç–µ"]]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
            base_forms = []
            for word in meaningful_words:
                base_forms.append(word)
                # –£–±–∏—Ä–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ–æ—Ä–º—ã
                if word.endswith('—É'):
                    base_forms.append(word[:-1])  # —Å–ø–∏—Ä—É–ª–∏–Ω—É -> —Å–ø–∏—Ä—É–ª–∏–Ω
                if word.endswith('—ã'):
                    base_forms.append(word[:-1] + '–∞')  # —Å–ø–∏—Ä—É–ª–∏–Ω—ã -> —Å–ø–∏—Ä—É–ª–∏–Ω–∞
                if word.endswith('–æ–π'):
                    base_forms.append(word[:-2] + '–∞')  # —Å–ø–∏—Ä—É–ª–∏–Ω–æ–π -> —Å–ø–∏—Ä—É–ª–∏–Ω–∞
            
            meaningful_words = list(set(base_forms))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            
            print(f"üîç DEBUG: –ò—Å—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞: {text_words}")
            print(f"üîç DEBUG: –ó–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞: {meaningful_words}")
            
            # –ò—â–µ–º –≤ –æ–±–µ–∏—Ö –±–∞–∑–∞—Ö –∑–Ω–∞–Ω–∏–π
            found_products = []
            best_matches = []
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            print("üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            for kb_file in ["knowledge_base.json", "knowledge_base_new.json"]:
                try:
                    with open(kb_file, "r", encoding="utf-8") as f:
                        kb_data = json.load(f)
                    
                    for item in kb_data:
                        product = item.get("product", "").lower()
                        description = item.get("short_description", "").lower()
                        category = item.get("category", "").lower()
                        
                        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏
                        matches = 0
                        for word in meaningful_words:
                            if word in product:
                                matches += 3  # –í—ã—Å–æ–∫–∏–π –≤–µ—Å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
                                print(f"üîç DEBUG: –°–ª–æ–≤–æ '{word}' –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ '{product}'")
                            if word in description:
                                matches += 1  # –ú–µ–Ω—å—à–∏–π –≤–µ—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
                                print(f"üîç DEBUG: –°–ª–æ–≤–æ '{word}' –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏")
                            if word in category:
                                matches += 2  # –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                                print(f"üîç DEBUG: –°–ª–æ–≤–æ '{word}' –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                        query_lower = message.text.lower()
                        
                        # –î–ª—è –≤–∏—Ç–∞–º–∏–Ω–∞ –° - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞–º —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º –°
                        if "–≤–∏—Ç–∞–º–∏–Ω —Å" in query_lower or "–≤–∏—Ç–∞–º–∏–Ω c" in query_lower:
                            if "–≤–∏—Ç–∞–º–∏–Ω —Å" in product or "–≤–∏—Ç–∞–º–∏–Ω c" in product or "–æ—Ä–∞–Ω–∂" in product:
                                matches += 10  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                                print(f"üîç DEBUG: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ –° –≤ –ø—Ä–æ–¥—É–∫—Ç–µ '{product}'")
                            elif "–≤–∏—Ç–∞–º–∏–Ω –¥" in product or "–≤–∏—Ç–∞–º–∏–Ω d" in product:
                                matches = 0  # –ò—Å–∫–ª—é—á–∞–µ–º –≤–∏—Ç–∞–º–∏–Ω –î
                                print(f"üîç DEBUG: –ò—Å–∫–ª—é—á–∞–µ–º –≤–∏—Ç–∞–º–∏–Ω –î –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        
                        # –î–ª—è –≤–∏—Ç–∞–º–∏–Ω–∞ –î - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞–º —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º –î
                        elif "–≤–∏—Ç–∞–º–∏–Ω –¥" in query_lower or "–≤–∏—Ç–∞–º–∏–Ω d" in query_lower:
                            if "–≤–∏—Ç–∞–º–∏–Ω –¥" in product or "–≤–∏—Ç–∞–º–∏–Ω d" in product:
                                matches += 10  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                                print(f"üîç DEBUG: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ –î –≤ –ø—Ä–æ–¥—É–∫—Ç–µ '{product}'")
                            else:
                                matches = 0  # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                                print(f"üîç DEBUG: –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç '{product}' –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏—Ç–∞–º–∏–Ω–∞ –î")
                        
                        if matches > 0:
                            found_products.append((item, matches))
                            print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç '{product}' —Å {matches} —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏")
                                
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {kb_file}: {e}")
            

            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            found_products.sort(key=lambda x: x[1], reverse=True)
            found_products = [item[0] for item in found_products]
        else:
            # –ò—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
            found_products = []
            for kb_file in ["knowledge_base.json", "knowledge_base_new.json"]:
                try:
                    with open(kb_file, "r", encoding="utf-8") as f:
                        kb_data = json.load(f)
                    
                    for item in kb_data:
                        if product_name.lower() in item.get("product", "").lower():
                            found_products.append(item)
                            
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {kb_file}: {e}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Å–µ—Ä–µ–±—Ä–µ
        if not found_products and any(word in message.text.lower() for word in ["—Å–µ—Ä–µ–±—Ä–æ", "—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π", "–∞—Ä–≥–µ–Ω—Ç"]):
            print("üîç –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è —Å–µ—Ä–µ–±—Ä–∞")
            for kb_file in ["knowledge_base.json", "knowledge_base_new.json"]:
                try:
                    with open(kb_file, "r", encoding="utf-8") as f:
                        kb_data = json.load(f)
                    
                    for item in kb_data:
                        product = item.get("product", "").lower()
                        description = item.get("short_description", "").lower()
                        
                        # –ò—â–µ–º –ê—Ä–≥–µ–Ω—Ç-–ú–∞–∫—Å –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ —Å–µ—Ä–µ–±—Ä–æ–º
                        if "–∞—Ä–≥–µ–Ω—Ç" in product or "—Å–µ—Ä–µ–±—Ä–æ" in description or "argent" in product:
                            found_products.append(item)
                            print(f"üîç DEBUG: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–¥—É–∫—Ç–µ '{product}'")
                            
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {kb_file}: {e}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –≤–∏—Ç–∞–º–∏–Ω–µ –°
        if not found_products and any(word in message.text.lower() for word in ["–≤–∏—Ç–∞–º–∏–Ω —Å", "–≤–∏—Ç–∞–º–∏–Ω c", "–≤–∏—Ç–∞–º–∏–Ω—Å"]):
            print("üîç –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –≤–∏—Ç–∞–º–∏–Ω–∞ –°")
            for kb_file in ["knowledge_base.json", "knowledge_base_new.json"]:
                try:
                    with open(kb_file, "r", encoding="utf-8") as f:
                        kb_data = json.load(f)
                    
                    for item in kb_data:
                        product = item.get("product", "").lower()
                        category = item.get("category", "").lower()
                        
                        # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º –° –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        if "–≤–∏—Ç–∞–º–∏–Ω —Å" in product or "–≤–∏—Ç–∞–º–∏–Ω c" in product or "–≤–∏—Ç–∞–º–∏–Ω —Å" in category or "–æ—Ä–∞–Ω–∂" in product:
                            found_products.append(item)
                            print(f"üîç DEBUG: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ –° –≤ –ø—Ä–æ–¥—É–∫—Ç–µ '{product}'")
                            
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {kb_file}: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if not found_products and context_product:
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ
            if isinstance(context_products, list) and len(context_products) > 1:
                found_products = context_products
                print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {len(context_products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            else:
                found_products = [context_product]
                print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç: {context_product.get('product', '')}")
        

        

        
        # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
        await send_typing_action(user_id, 2.0)
        
        if found_products:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç
            if len(found_products) == 1:
                product = found_products[0]
                product_name = product.get("product", "")
                url = product.get("url", "")
                image_id = product.get("image_id", "")
                short_desc = product.get("short_description", "")
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –Ω–µ –ø—É—Å—Ç–æ–π
                markup_buttons = []
                if url and url.strip():
                    markup_buttons.append([InlineKeyboardButton(
                        text="üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ", 
                        url=url
                    )])
                else:
                    # –ï—Å–ª–∏ URL –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
                    markup_buttons.append([InlineKeyboardButton(
                        text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É", 
                        callback_data="write_to_natalya"
                    )])
                
                markup = InlineKeyboardMarkup(inline_keyboard=markup_buttons)
                
                caption = f"üåø **{product_name}**\n\nüìù {short_desc}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
                if image_id and image_id.strip():
                    try:
                        await message.answer_photo(
                            photo=image_id,
                            caption=caption,
                            reply_markup=markup,
                            parse_mode="Markdown"
                        )
                        return
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {image_id}: {e}")
                
                # Fallback –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
                await message.reply(
                    caption,
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
            else:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ - —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å
                await send_product_carousel(message, found_products, user_id)
        else:
            # –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É", 
                    callback_data="write_to_natalya"
                )]
            ])
            
            await message.reply(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç, –æ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ.\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞\n"
                "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É –ù–∞—Ç–∞–ª—å–µ\n\n"
                "‚úâÔ∏è –ù–∞—Ç–∞–ª—å—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—Å—ã–ª–∫—É!",
                reply_markup=markup
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_product_link_request: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É."
        )

async def send_product_carousel(message: types.Message, products: list, user_id: int, start_index: int = 0):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    try:
        if not products:
            return
        
        current_index = start_index % len(products)
        product = products[current_index]
        
        product_name = product.get("product", "")
        url = product.get("url", "")
        image_id = product.get("image_id", "")
        short_desc = product.get("short_description", "")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        markup_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –Ω–µ –ø—É—Å—Ç–æ–π
        if url and url.strip():
            markup_buttons.append([InlineKeyboardButton(
                text="üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ", 
                url=url
            )])
        else:
            # –ï—Å–ª–∏ URL –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
            markup_buttons.append([InlineKeyboardButton(
                text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É", 
                callback_data="write_to_natalya"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if len(products) > 1:
            prev_index = (current_index - 1) % len(products)
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"carousel_prev_{user_id}_{prev_index}"
            ))
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏
        nav_buttons.append(InlineKeyboardButton(
            text=f"{current_index + 1}/{len(products)}", 
            callback_data="carousel_info"
        ))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if len(products) > 1:
            next_index = (current_index + 1) % len(products)
            nav_buttons.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
                callback_data=f"carousel_next_{user_id}_{next_index}"
            ))
        
        if nav_buttons:
            markup_buttons.append(nav_buttons)
        
        markup = InlineKeyboardMarkup(inline_keyboard=markup_buttons)
        
        caption = f"üåø **{product_name}**\n\nüìù {short_desc}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—É—Å–µ–ª–∏
        user_product_carousels[user_id] = {
            "products": products,
            "current_index": current_index,
            "message_id": None
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if image_id and image_id.strip():
            try:
                sent_message = await message.answer_photo(
                    photo=image_id,
                    caption=caption,
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
                user_product_carousels[user_id]["message_id"] = sent_message.message_id
                return
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {image_id}: {e}")
        
        # Fallback –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        sent_message = await message.reply(
            caption,
            reply_markup=markup,
            parse_mode="Markdown"
        )
        user_product_carousels[user_id]["message_id"] = sent_message.message_id
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_product_carousel: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—É—Å–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")

async def update_product_carousel(callback_query: types.CallbackQuery, user_id: int, new_index: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    try:
        if user_id not in user_product_carousels:
            await callback_query.answer("–ö–∞—Ä—É—Å–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        carousel_data = user_product_carousels[user_id]
        products = carousel_data["products"]
        
        if new_index >= len(products):
            await callback_query.answer("–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞", show_alert=True)
            return
        
        product = products[new_index]
        product_name = product.get("product", "")
        url = product.get("url", "")
        image_id = product.get("image_id", "")
        short_desc = product.get("short_description", "")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        markup_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –Ω–µ –ø—É—Å—Ç–æ–π
        if url and url.strip():
            markup_buttons.append([InlineKeyboardButton(
                text="üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ", 
                url=url
            )])
        else:
            # –ï—Å–ª–∏ URL –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
            markup_buttons.append([InlineKeyboardButton(
                text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É", 
                callback_data="write_to_natalya"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if len(products) > 1:
            prev_index = (new_index - 1) % len(products)
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"carousel_prev_{user_id}_{prev_index}"
            ))
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏
        nav_buttons.append(InlineKeyboardButton(
            text=f"{new_index + 1}/{len(products)}", 
            callback_data="carousel_info"
        ))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if len(products) > 1:
            next_index = (new_index + 1) % len(products)
            nav_buttons.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
                callback_data=f"carousel_next_{user_id}_{next_index}"
            ))
        
        if nav_buttons:
            markup_buttons.append(nav_buttons)
        
        markup = InlineKeyboardMarkup(inline_keyboard=markup_buttons)
        
        caption = f"üåø **{product_name}**\n\nüìù {short_desc}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
        carousel_data["current_index"] = new_index
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if image_id and image_id.strip():
            try:
                await callback_query.message.edit_media(
                    types.InputMediaPhoto(
                        media=image_id,
                        caption=caption,
                        parse_mode="Markdown"
                    ),
                    reply_markup=markup
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ {image_id}: {e}")
                # Fallback - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await callback_query.message.edit_caption(
                    caption=caption,
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
        else:
            await callback_query.message.edit_caption(
                caption=caption,
                reply_markup=markup,
                parse_mode="Markdown"
            )
        
        await callback_query.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ update_product_carousel: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏", show_alert=True)

def extract_products_from_answer(answer: str) -> list:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ)"""
    try:
        import json
        import re
        
        products = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        all_products = []
        for kb_file in ["knowledge_base.json", "knowledge_base_new.json"]:
            try:
                with open(kb_file, "r", encoding="utf-8") as f:
                    kb_data = json.load(f)
                    all_products.extend(kb_data)
            except:
                continue
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "1. –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞", "2. –ù–∞–∑–≤–∞–Ω–∏–µ", etc.
        recommendation_pattern = r'(\d+)\.\s*\*?\*?([^-\n]+?)(?:\s*-|\s*\*\*|\n|$)'
        recommendations = re.findall(recommendation_pattern, answer, re.MULTILINE)
        
        recommended_products_text = []
        for number, product_text in recommendations:
            # –û—á–∏—â–∞–µ–º –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
            clean_text = re.sub(r'\*\*?', '', product_text).strip()
            recommended_products_text.append(clean_text)
            print(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è {number}: '{clean_text}'")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∏—â–µ–º –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        if not recommended_products_text:
            # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é"
            sentences = re.split(r'[.!?]\s+', answer)
            for sentence in sentences:
                if any(word in sentence.lower() for word in ['—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '—Å–æ–≤–µ—Ç—É—é', '–ø–æ–¥–æ–π–¥–µ—Ç']):
                    recommended_products_text.append(sentence)
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        for product in all_products:
            product_name = product.get("product", "")
            if not product_name:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è
            name_variants = [
                product_name,  # –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                product_name.replace("-", " "),  # –ë–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤
                product_name.replace("-", "")   # –°–ª–∏—Ç–Ω–æ
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã
            first_word = product_name.split()[0] if " " in product_name else product_name
            if len(first_word) > 3 and first_word.lower() not in ["–≤–∏—Ç–∞–º–∏–Ω", "–º–∞–≥–Ω–∏–π", "–∫–∞–ª—å—Ü–∏–π"]:
                name_variants.append(first_word)
            
            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—Å—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∞ –Ω–µ –≤–æ –≤—Å–µ–º –æ—Ç–≤–µ—Ç–µ
            found_in_recommendations = False
            for rec_text in recommended_products_text:
                rec_text_lower = rec_text.lower()
                for variant in name_variants:
                    variant_lower = variant.lower()
                    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
                    if re.search(r'\b' + re.escape(variant_lower) + r'\b', rec_text_lower):
                        found_in_recommendations = True
                        print(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{product_name}' –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: '{rec_text}'")
                        break
                if found_in_recommendations:
                    break
            
            if found_in_recommendations:
                products.append({
                    "product": product_name,
                    "url": product.get("url", ""),
                    "image_id": product.get("image_id", ""),
                    "short_description": product.get("short_description", "")
                })
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_products = []
        seen_names = set()
        for product in products:
            product_name = product.get("product", "")
            if product_name not in seen_names:
                unique_products.append(product)
                seen_names.add(product_name)
        
        print(f"üéØ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(unique_products)} —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        return unique_products[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return []

async def handle_link_request_confirmation(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id
    
    if user_id not in user_product_context:
        await message.reply("ü§î –Ø –Ω–µ –ø–æ–º–Ω—é, –æ –∫–∞–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
        return
    
    products = user_product_context[user_id]
    
    if len(products) == 1:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –æ–¥–∏–Ω - —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await send_product_link(message, products[0])
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        del user_product_context[user_id]
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
        products_list = ""
        for i, product in enumerate(products, 1):
            product_name = product.get("product", "")
            products_list += f"{i}. {product_name}\n"
        
        await message.reply(
            f"üìã **–ù–∞ –∫–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞?**\n\n{products_list}\n"
            f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1) –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê—Ä–≥–µ–Ω—Ç –ú–∞–∫—Å)"
        )

async def handle_product_selection(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    if user_id not in user_product_context:
        return  # –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Ç–µ—Ä—è–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    
    products = user_product_context[user_id]
    selected_product = None
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    # 1. –ü–æ –Ω–æ–º–µ—Ä—É
    if text.isdigit():
        index = int(text) - 1
        if 0 <= index < len(products):
            selected_product = products[index]
    
    # 2. –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    if not selected_product:
        text_lower = text.lower()
        for product in products:
            product_name = product.get("product", "")
            if text_lower in product_name.lower() or product_name.lower() in text_lower:
                selected_product = product
                break
    
    if selected_product:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        await send_product_link(message, selected_product)
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        del user_product_context[user_id]
    else:
        # –ù–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
        products_list = ""
        for i, product in enumerate(products, 1):
            product_name = product.get("product", "")
            products_list += f"{i}. {product_name}\n"
        
        await message.reply(
            f"ü§î –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤—ã –≤—ã–±—Ä–∞–ª–∏.\n\n"
            f"üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:**\n{products_list}\n"
            f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
        )

async def send_all_products_list(message: types.Message, products: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    try:
        products_list = ""
        for i, product in enumerate(products, 1):
            product_name = product.get("product", "")
            products_list += f"{i}. **{product_name}**\n"
            if product.get('short_description'):
                products_list += f"   {product['short_description'][:100]}...\n"
            products_list += "\n"
        
        await message.reply(
            f"üåø **–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n{products_list}\n"
            f"üí¨ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:**\n"
            f"‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1)\n"
            f"‚Ä¢ –ò–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–≥–Ω–∏–π –ü–ª—é—Å)\n\n"
            f"üìã *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç*",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

async def handle_additional_recommendations(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–º—ã"""
    user_id = message.from_user.id
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        last_topic = None
        if user_id in user_product_context:
            context_products = user_product_context[user_id]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º—ã
            if context_products:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º—ã
                first_product = context_products[0]
                product_name = first_product.get("product", "").lower()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                if any(keyword in product_name for keyword in ["–∞—Ä–≥–µ–Ω—Ç", "–∫–æ—à–∞—á–∏–π –∫–æ–≥–æ—Ç—å", "–∏–Ω-–∞—É—Ä–∏–Ω", "–±–∞—Ä—Å"]):
                    last_topic = "–∏–º–º—É–Ω–∏—Ç–µ—Ç"
                elif any(keyword in product_name for keyword in ["–≤–∏—Ç–∞–º–∏–Ω —Å", "–æ—Ä–∞–Ω–∂"]):
                    last_topic = "–≤–∏—Ç–∞–º–∏–Ω—ã"
                elif any(keyword in product_name for keyword in ["–æ–º–µ–≥–∞", "—Ä—ã–±–∏–π –∂–∏—Ä"]):
                    last_topic = "–∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã"
                elif any(keyword in product_name for keyword in ["–º–∞–≥–Ω–∏–π", "–∫–∞–ª—å—Ü–∏–π"]):
                    last_topic = "–º–∏–Ω–µ—Ä–∞–ª—ã"
                elif any(keyword in product_name for keyword in ["bwl", "–≥–µ–ø–æ—Å–∏–Ω", "—á–µ—Ä–Ω–æ–≥–æ –æ—Ä–µ—Ö–∞"]):
                    last_topic = "–∞–Ω—Ç–∏–ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–Ω—ã–µ"
        
        print(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ–º–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {last_topic}")
        
        # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
        await send_typing_action(user_id, 2.0)
        
        # –ï—Å–ª–∏ —Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Ç–æ–π –∂–µ —Ç–µ–º–µ
        if last_topic == "–∏–º–º—É–Ω–∏—Ç–µ—Ç":
            await handle_additional_immunity_products(message, user_id)
        elif last_topic in ["–≤–∏—Ç–∞–º–∏–Ω—ã", "–∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã", "–º–∏–Ω–µ—Ä–∞–ª—ã"]:
            await handle_additional_supplements(message, user_id, last_topic)
        else:
            # –û–±—â–∏–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            await handle_general_additional_request(message, user_id, last_topic)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É."
        )

async def handle_additional_immunity_products(message: types.Message, user_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞"""
    from immunity_recommendations import IMMUNITY_SUPPORTING_PRODUCTS, IMMUNITY_INDIRECT_SUPPORT
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    recommended_products = []
    if user_id in user_product_context:
        recommended_products = [p.get("product", "") for p in user_product_context[user_id]]
    
    # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ã
    additional_products = []
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–ø—Ä—è–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ)
    for product_info in IMMUNITY_SUPPORTING_PRODUCTS:
        if not any(product_info["name"] in rec for rec in recommended_products):
            additional_products.append(product_info)
    
    # –ü–æ—Ç–æ–º –∫–æ—Å–≤–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    for product_info in IMMUNITY_INDIRECT_SUPPORT:
        if not any(product_info["name"] in rec for rec in recommended_products):
            additional_products.append(product_info)
    
    if additional_products:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3-4 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        additional_products = additional_products[:4]
        
        response = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å:\n\n"
        
        new_context = []
        for i, product_info in enumerate(additional_products, 1):
            response += f"{i}. **{product_info['name']}** - {product_info['description']}\n\n"
            new_context.append({
                "product": product_info["name"],
                "url": "",  # –ë—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Å—ã–ª–∫–∏
                "image_id": "",
                "short_description": product_info["description"]
            })
        
        response += "–ù—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤?\n\n*üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ Aurora*"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        user_product_context[user_id] = new_context
        
        await message.reply(response, parse_mode="Markdown")
    else:
        # –ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
        await message.reply(
            "ü§î –Ø —É–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.\n\n"
            "üí° –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å:\n"
            "‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞\n\n"
            "–ò–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –¥–ª—è –¥—Ä—É–≥–æ–π —Ü–µ–ª–∏! üòä"
        )

async def handle_additional_supplements(message: types.Message, user_id: int, topic: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ë–ê–î–æ–≤ –ø–æ —Ç–µ–º–µ"""
    topic_names = {
        "–≤–∏—Ç–∞–º–∏–Ω—ã": "–≤–∏—Ç–∞–º–∏–Ω–æ–≤",
        "–∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã": "–∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç", 
        "–º–∏–Ω–µ—Ä–∞–ª—ã": "–º–∏–Ω–µ—Ä–∞–ª–æ–≤"
    }
    
    await message.reply(
        f"ü§î –Ø —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã {topic_names.get(topic, '–ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ')} –∏–∑ –Ω–∞—à–µ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.\n\n"
        f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É—é:\n"
        f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        f"‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∏–ª–∏ —Ü–µ–ª—å\n"
        f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É –∑–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø–æ–¥–±–æ—Ä–æ–º\n\n"
        f"–ò–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –¥—Ä—É–≥–æ–π —Ü–µ–ª–∏ - —è –ø–æ–¥–±–µ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã! üòä"
    )

async def handle_general_additional_request(message: types.Message, user_id: int, last_topic: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    if last_topic == "–∞–Ω—Ç–∏–ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–Ω—ã–µ":
        await message.reply(
            "‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞, "
            "–∞ —è –ø–µ—Ä–µ—à–µ–ª –∫ –∞–Ω—Ç–∏–ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º.\n\n"
            "üîÑ –î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –≤–∞—à–µ–º—É –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –æ–± –∏–º–º—É–Ω–∏—Ç–µ—Ç–µ!\n\n"
            "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?"
        )
    else:
        await message.reply(
            "ü§î –ß—Ç–æ–±—ã –¥–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n\n"
            "‚Ä¢ –ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å? (–∏–º–º—É–Ω–∏—Ç–µ—Ç, –ø–µ—á–µ–Ω—å, –∫–æ–∂–∞, —ç–Ω–µ—Ä–≥–∏—è...)\n"
            "‚Ä¢ –ï—Å—Ç—å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?\n\n"
            "üí¨ –ù–∞–ø—Ä–∏–º–µ—Ä: \"–ß—Ç–æ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞?\" –∏–ª–∏ \"–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø–µ—á–µ–Ω–∏\"\n\n"
            "–¢–∞–∫ —è —Å–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã! üòä"
        )

async def find_product_in_knowledge_base(product_name: str) -> dict:
    """–ò—â–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤–æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö –∑–Ω–∞–Ω–∏–π"""
    import json
    import os
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    kb_files = [
        "knowledge_base.json",
        "knowledge_base_new.json", 
        "knowledge_base_fixed.json"
    ]
    
    for kb_file in kb_files:
        try:
            if os.path.exists(kb_file):
                with open(kb_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                    for item in data:
                        if 'product' in item:
                            item_name = item['product']
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                            if (product_name.lower() in item_name.lower() or 
                                item_name.lower() in product_name.lower() or
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ —Å–∫–æ–±–æ–∫
                                product_name.split('(')[0].strip().lower() in item_name.lower() or
                                item_name.split('(')[0].strip().lower() in product_name.lower()):
                                print(f"üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –≤ {kb_file}: {item_name}")
                                return item
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {kb_file}: {e}")
    
    print(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö")
    return None

async def send_product_link(message: types.Message, product: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–ª—é—á–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        product_name = product.get("name", "") or product.get("product", "")
        url = product.get("url", "")
        image_id = product.get("image_id", "")
        short_desc = product.get("short_description", "")
        
        # –ï—Å–ª–∏ URL –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not url or not image_id:
            print(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name}")
            full_product = await find_product_in_knowledge_base(product_name)
            if full_product:
                url = full_product.get("url", url)
                image_id = full_product.get("image_id", image_id)
                short_desc = full_product.get("short_description", short_desc)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: URL={bool(url)}, Image={bool(image_id)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
        if not product_name:
            print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –Ω–µ –ø—É—Å—Ç–æ–π
        markup_buttons = []
        if url and url.strip():
            markup_buttons.append([InlineKeyboardButton(
                text="üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ", 
                url=url
            )])
        else:
            # –ï—Å–ª–∏ URL –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
            markup_buttons.append([InlineKeyboardButton(
                text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É", 
                callback_data="write_to_natalya"
            )])
        
        markup = InlineKeyboardMarkup(inline_keyboard=markup_buttons)
        
        caption = f"üåø **{product_name}**\n\nüìù {short_desc}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if image_id and image_id.strip():
            try:
                await message.answer_photo(
                    photo=image_id,
                    caption=caption,
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
                return
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {image_id}: {e}")
        
        # Fallback –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        await message.reply(
            caption,
            reply_markup=markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏")

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"ü§ñ BOT_TOKEN: {'‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' if BOT_TOKEN and BOT_TOKEN != 'your_bot_token_here' else '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"üë§ ADMIN_ID: {'‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' if ADMIN_ID and ADMIN_ID != 0 else '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"üß† AI —Ñ—É–Ω–∫—Ü–∏–∏: {'‚úÖ –∞–∫—Ç–∏–≤–Ω—ã' if AI_ENABLED else '‚ùå –æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
    
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())