"""
Command handlers - /start, /help, /products, /categories with service integration
"""
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
from frontend.services.search_service import search_service
from frontend.services.llm_service import llm_service
from frontend.services.conversation_service import conversation_service

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è –∫–æ–º–∞–Ω–¥
router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command"""
    user_id = message.from_user.id
    username = message.from_user.full_name
    
    logger.info(f"User {user_id} ({username}) started bot")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conversation_service.clear_context(user_id)
    
    welcome_text = (
        f"üåø –ü—Ä–∏–≤–µ—Ç, {username}! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ AURORA!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "‚Ä¢ –í–∏—Ç–∞–º–∏–Ω—ã –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞\n"
        "‚Ä¢ –û–º–µ–≥–∞-3 –¥–ª—è —Å–µ—Ä–¥—Ü–∞\n"
        "‚Ä¢ –ú–∞–≥–Ω–∏–π –¥–ª—è —Å–Ω–∞\n"
        "‚Ä¢ –ü—Ä–æ–±–∏–æ—Ç–∏–∫–∏ –¥–ª—è –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è\n"
        "‚Ä¢ –ö–æ–ª–ª–∞–≥–µ–Ω –¥–ª—è –∫–æ–∂–∏ –∏ –≤–æ–ª–æ—Å\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏"
    )
    
    await message.answer(welcome_text)


@router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command"""
    logger.info(f"User {message.from_user.id} requested help")
    
    help_text = (
        "üîç **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
        "1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å\n"
        "2Ô∏è‚É£ –Ø –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "3Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∫–∞–∂–¥–æ–º\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
        "‚Ä¢ '–ù—É–∂–Ω—ã –≤–∏—Ç–∞–º–∏–Ω—ã –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞'\n"
        "‚Ä¢ '–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–µ–π?'\n"
        "‚Ä¢ '–û–º–µ–≥–∞-3 –¥–ª—è —Å–µ—Ä–¥—Ü–∞'\n"
        "‚Ä¢ '–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–æ–∂–∏ –∏ –≤–æ–ª–æ—Å'\n"
        "‚Ä¢ '–ü—Ä–æ—Ç–∏–≤–æ–≤–∏—Ä—É—Å–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ'\n"
        "‚Ä¢ '–î–ª—è –ø–µ—á–µ–Ω–∏'\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/products - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "/categories - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É!"
    )
    
    await message.answer(help_text)


@router.message(Command("products"))
async def cmd_products(message: Message):
    """Handle /products command - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested products list")
    
    await message.bot.send_chat_action(message.chat.id, "typing")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π)
        search_results = await search_service.search_products(
            query="",  # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω–µ—Ç –≤—Å–µ –∏–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ
            limit=20
        )
        
        if not search_results:
            await message.answer(
                "üì¶ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö."
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        products_by_category = {}
        for result in search_results[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
            product = result.product
            category = product.get('category', '–†–∞–∑–Ω–æ–µ')
            
            if category not in products_by_category:
                products_by_category[category] = []
            
            products_by_category[category].append(product.get('product', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_parts = ["üì¶ **–ù–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n"]
        
        for category, products in sorted(products_by_category.items()):
            response_parts.append(f"\n**{category}:**")
            for product_name in products[:10]:  # –ú–∞–∫—Å 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                response_parts.append(f"  ‚Ä¢ {product_name}")
        
        response_parts.append("\n\nüí° –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        
        response_text = "\n".join(response_parts)
        
        await message.answer(response_text)
        
    except Exception as e:
        logger.error(f"Error in /products command: {e}", exc_info=True)
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å."
        )


@router.message(Command("categories"))
async def cmd_categories(message: Message):
    """Handle /categories command - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested categories")
    
    await message.bot.send_chat_action(message.chat.id, "typing")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ search service
        categories = await search_service.get_categories()
        
        if not categories:
            await message.answer(
                "üìÇ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏."
            )
            return
        
        response_parts = [
            "üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:**\n",
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å:\n"
        ]
        
        for i, category in enumerate(categories, 1):
            response_parts.append(f"{i}. {category}")
        
        response_parts.append(
            "\nüí° –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"
        )
        
        response_text = "\n".join(response_parts)
        
        await message.answer(response_text)
        
    except Exception as e:
        logger.error(f"Error in /categories command: {e}", exc_info=True)
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """Handle /stats command - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested stats")
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        cache_stats = llm_service.get_cache_stats()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        conv_stats = conversation_service.get_stats()
        
        response_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
            f"**–ö—ç—à LLM:**\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: {cache_stats['size']}/{cache_stats['max_size']}\n"
            f"‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π: {cache_stats['total_hits']}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {cache_stats['avg_hits']:.1f}\n\n"
            f"**–†–∞–∑–≥–æ–≤–æ—Ä—ã:**\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {conv_stats['total_conversations']}\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {conv_stats['total_messages']}\n"
        )
        
        await message.answer(response_text)
        
    except Exception as e:
        logger.error(f"Error in /stats command: {e}", exc_info=True)
        await message.answer("üòî –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("clear"))
async def cmd_clear(message: Message):
    """Handle /clear command - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested clear history")
    
    conversation_service.clear_context(user_id)
    
    await message.answer(
        "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞!\n\n"
        "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä."
    )