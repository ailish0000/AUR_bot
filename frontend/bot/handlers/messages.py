"""
Message handlers - Handle user messages with full LLM integration
"""
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import StateFilter
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
from frontend.services.llm_service import llm_service
from frontend.services.search_service import search_service
from frontend.services.conversation_service import conversation_service

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()


@router.message(StateFilter(None))
async def handle_message(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    2. –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ search_service
    3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ LLM (—Å –∫—ç—à–µ–º, –ø—Ä–æ–º–ø—Ç–∞–º–∏, special handlers)
    4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    5. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    user_id = message.from_user.id
    user_text = message.text
    
    logger.info(f"User {user_id} sent message: {user_text[:50]}...")
    
    try:
        # ==========================================
        # 1. –°–û–•–†–ê–ù–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –í –ò–°–¢–û–†–ò–Æ
        # ==========================================
        conversation_service.add_message(
            user_id=user_id,
            role="user",
            content=user_text
        )
        
        # ==========================================
        # 2. –ü–û–ò–°–ö –ü–†–û–î–£–ö–¢–û–í
        # ==========================================
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        logger.info(f"Searching products for query: {user_text[:50]}...")
        search_results = await search_service.search_products(
            query=user_text,
            limit=8  # –ò—â–µ–º –¥–æ 8 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        products = [result.product for result in search_results]
        
        logger.info(f"Found {len(products)} products")
        
        # ==========================================
        # 3. –û–ë–†–ê–ë–û–¢–ö–ê –ß–ï–†–ï–ó LLM
        # ==========================================
        logger.info("Processing through LLM service...")
        llm_response = await llm_service.process_query(
            user_query=user_text,
            products=products
        )
        
        response_text = llm_response.text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞
        if llm_response.cached:
            logger.info("Response from cache")
        
        # ==========================================
        # 4. –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–í–ï–¢–ê –í –ò–°–¢–û–†–ò–Æ
        # ==========================================
        conversation_service.add_message(
            user_id=user_id,
            role="assistant",
            content=response_text,
            metadata={
                "products_count": len(products),
                "intent": llm_response.intent,
                "confidence": llm_response.confidence,
                "cached": llm_response.cached
            }
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ follow-up
        if products:
            conversation_service.set_last_products(user_id, products)
        
        # ==========================================
        # 5. –û–¢–ü–†–ê–í–ö–ê –û–¢–í–ï–¢–ê
        # ==========================================
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ (Telegram limit: 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        max_length = 4000
        
        if len(response_text) <= max_length:
            await message.answer(response_text)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            
            for line in response_text.split('\n'):
                if len(current_part) + len(line) + 1 <= max_length:
                    current_part += line + '\n'
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            for i, part in enumerate(parts, 1):
                if i > 1:
                    await message.bot.send_chat_action(message.chat.id, "typing")
                await message.answer(part)
        
        logger.info(f"Response sent to user {user_id}")
        
    except Exception as e:
        import time
        error_id = f"ERR-{int(time.time())}-{user_id}"
        logger.error(f"Error {error_id}: {e}", exc_info=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å ID
        await message.answer(
            f"üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
            f"üÜî –ö–æ–¥ –æ—à–∏–±–∫–∏: `{error_id}`\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å /start –¥–ª—è –Ω–∞—á–∞–ª–∞\n\n"
            "üí¨ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–æ–¥ –æ—à–∏–±–∫–∏."
        )