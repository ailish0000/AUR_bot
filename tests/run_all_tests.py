#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞ Aurora
"""

import sys
import os
import asyncio
import argparse
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from test_framework import BotTestFramework
from test_nlp_processor import create_nlp_tests
from test_product_search import create_product_search_tests  
from test_llm_responses import create_llm_tests
from test_user_interactions import create_user_interaction_tests
from test_regression import create_regression_tests

class TestRunner:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.framework = BotTestFramework()
        self.test_modules = []
        
    def setup_all_tests(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        self.test_modules = [
            ("NLP Processor", create_nlp_tests(self.framework)),
            ("Product Search", create_product_search_tests(self.framework)),
            ("LLM Responses", create_llm_tests(self.framework)),
            ("User Interactions", create_user_interaction_tests(self.framework)),
            ("Regression Tests", create_regression_tests(self.framework))
        ]
        
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.framework.test_cases)} —Ç–µ—Å—Ç–æ–≤ –≤ {len(self.test_modules)} –º–æ–¥—É–ª—è—Ö")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        priorities = {}
        
        for test in self.framework.test_cases:
            cat = test.category
            prio = test.priority
            
            categories[cat] = categories.get(cat, 0) + 1
            priorities[prio] = priorities.get(prio, 0) + 1
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:")
        print("   –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for cat, count in sorted(categories.items()):
            print(f"      {cat}: {count}")
        
        print("   –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:")
        for prio, count in sorted(priorities.items()):
            icon = {"critical": "üö®", "high": "‚ö°", "medium": "üìã", "low": "üìù"}.get(prio, "‚ùì")
            print(f"      {icon} {prio}: {count}")
    
    async def run_tests(self, categories=None, priorities=None, include_regression=True):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not categories and not priorities:
            if include_regression:
                # –í—Å–µ —Ç–µ—Å—Ç—ã –≤–∫–ª—é—á–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ
                pass  # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            else:
                # –ò—Å–∫–ª—é—á–∞–µ–º —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
                categories = [cat for cat in ["nlp_intents", "nlp_entities", "nlp_sentiment", 
                                             "product_search", "product_extraction",
                                             "llm_quality", "llm_safety", "llm_technical", 
                                             "llm_formatting", "llm_product_knowledge", "llm_links",
                                             "bot_commands", "dialog_scenarios", "context_management", "error_handling"]
                            if "regression" not in cat]
        
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
        if categories:
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")
        if priorities:
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: {', '.join(priorities)}")
        
        start_time = datetime.now()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        results = await self.framework.run_all_tests(categories, priorities)
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        print(f"\n‚è±Ô∏è –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        return results
    
    def analyze_results(self, results):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not results:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(results)
        passed = len([r for r in results if r.result.value == "PASS"])
        failed = len([r for r in results if r.result.value == "FAIL"])
        
        success_rate = (passed / total) * 100 if total > 0 else 0
        
        print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"   üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        critical_failures = [r for r in results if r.test_case.priority == "critical" and r.result.value == "FAIL"]
        if critical_failures:
            print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(critical_failures)}):")
            for result in critical_failures:
                print(f"   ‚ùå {result.test_case.name}")
                print(f"      {result.message}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥—Ä–µ—Å—Å–∏–π
        regression_failures = [r for r in results if "regression" in r.test_case.category and r.result.value == "FAIL"]
        if regression_failures:
            print(f"\nüêõ –†–ï–ì–†–ï–°–°–ò–ò ({len(regression_failures)}):")
            for result in regression_failures:
                print(f"   ‚ùå {result.test_case.name}")
                print(f"      {result.message}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if critical_failures or regression_failures:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            if critical_failures:
                print("   üö® –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã!")
            if regression_failures:
                print("   üêõ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞!")
            print("   üìã –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        else:
            print(f"\nüéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
            if success_rate >= 95:
                print("   üèÜ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ!")
            elif success_rate >= 90:
                print("   ‚ú® –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –æ—Ç–ª–∏—á–Ω–æ–µ!")
            elif success_rate >= 80:
                print("   üëç –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ —Ö–æ—Ä–æ—à–µ–µ, –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å")
            else:
                print("   ‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
    
    def generate_reports(self, results, save_to_file=True):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
        if save_to_file:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
            full_report_name = f"full_test_report_{timestamp}.txt"
            self.framework.save_report(full_report_name)
            print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {full_report_name}")
            
            # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç —Å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–º–∏—Å—è —Ç–µ—Å—Ç–∞–º–∏
            failed_results = [r for r in results if r.result.value == "FAIL"]
            if failed_results:
                failures_report = f"failures_report_{timestamp}.txt"
                with open(failures_report, 'w', encoding='utf-8') as f:
                    f.write("üö® –û–¢–ß–ï–¢ –û –ü–†–û–í–ê–õ–ò–í–®–ò–•–°–Ø –¢–ï–°–¢–ê–•\n")
                    f.write("=" * 50 + "\n\n")
                    
                    for result in failed_results:
                        f.write(f"‚ùå {result.test_case.name}\n")
                        f.write(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result.test_case.category}\n")
                        f.write(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {result.test_case.priority}\n")
                        f.write(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {result.test_case.description}\n")
                        f.write(f"   –û—à–∏–±–∫–∞: {result.message}\n")
                        if result.error_details:
                            f.write(f"   –î–µ—Ç–∞–ª–∏: {result.error_details}\n")
                        f.write("\n" + "-" * 40 + "\n\n")
                
                print(f"üî¥ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–∞–ª–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {failures_report}")
        
        return self.framework.generate_report()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞ Aurora")
    parser.add_argument("--categories", nargs="*", help="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--priorities", nargs="*", help="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ç–µ—Å—Ç–æ–≤ (critical, high, medium, low)")
    parser.add_argument("--no-regression", action="store_true", help="–ò—Å–∫–ª—é—á–∏—Ç—å regression —Ç–µ—Å—Ç—ã")
    parser.add_argument("--only-critical", action="store_true", help="–¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")
    parser.add_argument("--only-regression", action="store_true", help="–¢–æ–ª—å–∫–æ regression —Ç–µ—Å—Ç—ã")
    parser.add_argument("--no-reports", action="store_true", help="–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ç—á–µ—Ç—ã –≤ —Ñ–∞–π–ª—ã")
    
    args = parser.parse_args()
    
    print("üß™ –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–¢–ï–°–¢–û–í –ë–û–¢–ê AURORA")
    print("=" * 50)
    
    runner = TestRunner()
    runner.setup_all_tests()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    categories = args.categories
    priorities = args.priorities
    include_regression = not args.no_regression
    
    if args.only_critical:
        priorities = ["critical"]
    
    if args.only_regression:
        categories = ["critical_regression", "technical_regression", "scenario_regression", "regression"]
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    try:
        results = await runner.run_tests(categories, priorities, include_regression)
        
        # –ê–Ω–∞–ª–∏–∑ –∏ –æ—Ç—á–µ—Ç—ã
        runner.analyze_results(results)
        
        if not args.no_reports:
            runner.generate_reports(results)
        
        # –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è CI/CD
        failed_count = len([r for r in results if r.result.value == "FAIL"])
        critical_failures = len([r for r in results if r.test_case.priority == "critical" and r.result.value == "FAIL"])
        
        if critical_failures > 0:
            print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨ - –ö–û–î –í–û–ó–í–†–ê–¢–ê 2")
            return 2
        elif failed_count > 0:
            print(f"\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´ - –ö–û–î –í–û–ó–í–†–ê–¢–ê 1")
            return 1
        else:
            print(f"\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ - –ö–û–î –í–û–ó–í–†–ê–¢–ê 0")
            return 0
            
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return 3

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"\nüí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

