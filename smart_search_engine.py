#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
from typing import List, Dict, Optional, Union, Tuple
from dataclasses import dataclass
from metadata_structure import ProductCategory, ProductForm, HealthIndication, TargetGroup

@dataclass
class SearchFilter:
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    categories: Optional[List[str]] = None
    forms: Optional[List[str]] = None
    indications: Optional[List[str]] = None
    properties: Optional[List[str]] = None
    components: Optional[List[str]] = None
    exclude_properties: Optional[List[str]] = None  # –∏—Å–∫–ª—é—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞
    exclude_contraindications: Optional[List[str]] = None  # –∏—Å–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è
    target_groups: Optional[List[str]] = None

@dataclass
class SearchResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    product_name: str
    category: str
    form: str
    properties: List[str]
    indications: List[str]
    components: List[str]
    score: float  # —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
    original_data: Dict  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞

class SmartSearchEngine:
    """–£–º–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º"""
    
    def __init__(self, metadata_file: str = 'products_metadata.json'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        self.metadata_file = metadata_file
        self.products = []
        self.load_metadata()
        
        # –°–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
        self.synonyms = {
            '–ø–µ—á–µ–Ω—å': ['–≥–µ–ø–∞—Ç–æ', '–¥–µ—Ç–æ–∫—Å', '–æ—á–∏—â–µ–Ω–∏–µ –ø–µ—á–µ–Ω–∏', '–∂–µ–ª—á–µ–≥–æ–Ω–Ω—ã–π'],
            '–∏–º–º—É–Ω–∏—Ç–µ—Ç': ['–∑–∞—â–∏—Ç–Ω—ã–µ —Å–∏–ª—ã', '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ–º–æ—Å—Ç—å', '–∏–º–º—É–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'],
            '–ø—Ä–æ—Å—Ç—É–¥–∞': ['–æ—Ä–≤–∏', '–≥—Ä–∏–ø–ø', '–∫–∞—à–µ–ª—å', '–Ω–∞—Å–º–æ—Ä–∫', '–≤–∏—Ä—É—Å'],
            '—Å—É—Å—Ç–∞–≤—ã': ['–∞—Ä—Ç—Ä–∏—Ç', '–∞—Ä—Ç—Ä–æ–∑', '—Ö—Ä—è—â–∏', '—Å–≤—è–∑–∫–∏', '–ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç—å'],
            '–ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ': ['–∂–∫—Ç', '–∂–µ–ª—É–¥–æ–∫', '–∫–∏—à–µ—á–Ω–∏–∫', '–ø–µ—Ä–µ–≤–∞—Ä–∏–≤–∞–Ω–∏–µ'],
            '—Å–æ—Ä–±–µ–Ω—Ç': ['–¥–µ—Ç–æ–∫—Å', '–æ—á–∏—â–µ–Ω–∏–µ', '—Ç–æ–∫—Å–∏–Ω—ã', '—à–ª–∞–∫–∏', '–∞–¥—Å–æ—Ä–±–µ–Ω—Ç'],
            '–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç': ['—Å–≤–æ–±–æ–¥–Ω—ã–µ —Ä–∞–¥–∏–∫–∞–ª—ã', '–æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å'],
            '–≤–∏—Ç–∞–º–∏–Ω—ã': ['–∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑', '–≥–∏–ø–æ–≤–∏—Ç–∞–º–∏–Ω–æ–∑', '–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã'],
            '–≤–∏—Ç–∞–º–∏–Ω —Å': ['–∞—Å–∫–æ—Ä–±–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞', '–∞—Å–∫–æ—Ä–±–∏–Ω', '–≤–∏—Ç–∞–º–∏–Ω c', 'vitamin c'],
            '–∫–∞–ø—Å—É–ª—ã': ['–∫–∞–ø—Å', '–∫–∞–ø—Å—É–ª–∞'],
            '—Ç–∞–±–ª–µ—Ç–∫–∏': ['—Ç–∞–±—Å', '—Ç–∞–±–ª–µ—Ç–∫–∞', '–ø–∏–ª—é–ª–∏'],
            '–∂–∏–¥–∫–∏–π': ['—Å–æ–∫', '–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç', '—Ä–∞—Å—Ç–≤–æ—Ä', '–Ω–∞–ø–∏—Ç–æ–∫'],
            '–ø–æ—Ä–æ—à–æ–∫': ['—Å—É—Ö–∞—è —Å–º–µ—Å—å', '—Å–∞—à–µ']
        }
    
    def load_metadata(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        try:
            with open(self.metadata_file, 'r', encoding='utf-8') as f:
                self.products = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            self.products = []
    
    def search(self, query: str, filters: Optional[SearchFilter] = None) -> List[SearchResult]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞"""
        
        print(f"üîç –ü–æ–∏—Å–∫: '{query}'")
        if filters:
            print(f"üéØ –§–∏–ª—å—Ç—Ä—ã: {self._describe_filters(filters)}")
        
        # 1. –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        text_results = self._text_search(query)
        
        # 2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if filters:
            filtered_results = self._apply_filters(text_results, filters)
        else:
            filtered_results = text_results
        
        # 3. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        sorted_results = sorted(filtered_results, key=lambda x: x.score, reverse=True)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(sorted_results)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        return sorted_results[:20]  # –¢–û–ü-20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    def _text_search(self, query: str) -> List[SearchResult]:
        """–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º —Å–∏–Ω–æ–Ω–∏–º–æ–≤"""
        
        query_lower = query.lower()
        search_terms = self._expand_query(query_lower)
        
        results = []
        
        for product in self.products:
            score = self._calculate_text_score(product, search_terms)
            
            if score > 0:
                result = SearchResult(
                    product_name=product['product_name'],
                    category=product['category'],
                    form=product['form'],
                    properties=product['properties'],
                    indications=product['health_indications'],
                    components=product['main_components'],
                    score=score,
                    original_data=product
                )
                results.append(result)
        
        return results
    
    def _expand_query(self, query: str) -> List[str]:
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏"""
        terms = [query]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ –∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–∞–º–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
        for base_word, synonyms in self.synonyms.items():
            if base_word in query:
                terms.extend(synonyms)
                
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∑–∞–ø—Ä–æ—Å–∞
        words = query.split()
        for word in words:
            if len(word) > 2:  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                terms.append(word)
                
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–∏—Ç–∞–º–∏–Ω–∞ –°
        if any(word in ['–≤–∏—Ç–∞–º–∏–Ω', '–≤–∏—Ç–∞–º–∏–Ω–æ–º', '—Å', 'c'] for word in words):
            if any(word in ['—Å', 'c'] for word in words):
                terms.extend(self.synonyms.get('–≤–∏—Ç–∞–º–∏–Ω —Å', []))
                terms.append('–≤–∏—Ç–∞–º–∏–Ω —Å')  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–π —Ç–µ—Ä–º–∏–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
                
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for base_word, synonyms in self.synonyms.items():
            for word in words:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–∏ —Å–ª–æ–≤
                if (word.startswith('–≤–∏—Ç–∞–º–∏–Ω') and base_word.startswith('–≤–∏—Ç–∞–º–∏–Ω')) or \
                   (word in base_word or base_word in word):
                    terms.extend(synonyms)
        
        return list(set(terms))  # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    def _calculate_text_score(self, product: Dict, search_terms: List[str]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        
        score = 0.0
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        searchable_text = ' '.join([
            product['product_name'].lower(),
            product['category'].lower(),
            ' '.join(product['health_indications']),
            ' '.join(product['properties']),
            ' '.join(product['main_components']).lower()
        ])
        
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
        weights = {
            'product_name': 3.0,
            'category': 2.5,
            'indications': 2.5,
            'properties': 2.5,
            'components': 1.5
        }
        
        for term in search_terms:
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if term in product['product_name'].lower():
                score += weights['product_name']
            
            # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if term in product['category'].lower():
                score += weights['category']
            
            # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö
            for indication in product['health_indications']:
                if term in indication.lower():
                    score += weights['indications']
            
            # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö
            for prop in product['properties']:
                if term in prop.lower():
                    score += weights['properties']
            
            # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
            for component in product['main_components']:
                if term in component.lower():
                    score += weights['components']
        
        # –ë–æ–Ω—É—Å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        term_matches = sum(1 for term in search_terms if term in searchable_text)
        if term_matches > 1:
            score *= (1 + (term_matches - 1) * 0.2)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_bonuses = {
            '–≤–∏—Ç–∞–º–∏–Ω —Å': ['–í–∏—Ç–∞–º–∏–Ω –°'],
            '–≤–∏—Ç–∞–º–∏–Ω –¥': ['–í–∏—Ç–∞–º–∏–Ω –î'],
            '–æ–º–µ–≥–∞': ['–û–º–µ–≥–∞'],
            '–ø–µ—á–µ–Ω—å': ['–ì–µ–ø–∞—Ç–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä—ã'],
            '–∏–º–º—É–Ω–∏—Ç–µ—Ç': ['–ò–º–º—É–Ω–æ–º–æ–¥—É–ª—è—Ç–æ—Ä—ã']
        }
        
        for search_term in search_terms:
            if search_term in category_bonuses:
                target_categories = category_bonuses[search_term]
                if product['category'] in target_categories:
                    score += 5.0  # –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        return score
    
    def _apply_filters(self, results: List[SearchResult], filters: SearchFilter) -> List[SearchResult]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞"""
        
        filtered = []
        
        for result in results:
            if self._matches_filters(result, filters):
                filtered.append(result)
        
        return filtered
    
    def _matches_filters(self, result: SearchResult, filters: SearchFilter) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–≥–∏–±–∫–∞—è –ª–æ–≥–∏–∫–∞)
        if filters.categories:
            category_match = False
            for filter_category in filters.categories:
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if result.category == filter_category:
                    category_match = True
                    break
                # –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if self._is_category_match(result.category, filter_category):
                    category_match = True
                    break
            if not category_match:
                return False
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–æ—Ä–º–∞–º –≤—ã–ø—É—Å–∫–∞
        if filters.forms:
            if result.form not in filters.forms:
                return False
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º (—Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å)
        if filters.indications:
            if not any(ind in result.indications for ind in filters.indications):
                return False
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º (—Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å)
        if filters.properties:
            if not any(prop in result.properties for prop in filters.properties):
                return False
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        if filters.components:
            has_component = False
            for filter_comp in filters.components:
                for result_comp in result.components:
                    if filter_comp.lower() in result_comp.lower():
                        has_component = True
                        break
                if has_component:
                    break
            if not has_component:
                return False
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤
        if filters.exclude_properties:
            if any(prop in result.properties for prop in filters.exclude_properties):
                return False
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è–º
        if filters.exclude_contraindications:
            product_contras = result.original_data.get('contraindications', [])
            for exclude_contra in filters.exclude_contraindications:
                if any(exclude_contra.lower() in contra.lower() for contra in product_contras):
                    return False
        
        return True
    
    def _is_category_match(self, product_category: str, filter_category: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —É—á–µ—Ç–æ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏"""
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        category_mapping = {
            "–í–∏—Ç–∞–º–∏–Ω—ã, –º–∏–Ω–µ—Ä–∞–ª—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã": [
                "–í–∏—Ç–∞–º–∏–Ω –°", "–í–∏—Ç–∞–º–∏–Ω –î", "–í–∏—Ç–∞–º–∏–Ω –ï", "–í–∏—Ç–∞–º–∏–Ω –ê", "–í–∏—Ç–∞–º–∏–Ω –í",
                "–ö–∞–ª—å—Ü–∏–π", "–ú–∞–≥–Ω–∏–π", "–ñ–µ–ª–µ–∑–æ", "–¶–∏–Ω–∫", "–°–µ–ª–µ–Ω", "–û–º–µ–≥–∞"
            ],
            "–ì–µ–ø–∞—Ç–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä—ã": ["–ü–µ—á–µ–Ω—å", "–î–µ—Ç–æ–∫—Å", "–û—á–∏—â–µ–Ω–∏–µ"],
            "–ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã": ["–ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç", "–°–≤–æ–±–æ–¥–Ω—ã–µ —Ä–∞–¥–∏–∫–∞–ª—ã"],
            "–ò–º–º—É–Ω–æ–º–æ–¥—É–ª—è—Ç–æ—Ä—ã": ["–ò–º–º—É–Ω–∏—Ç–µ—Ç", "–ó–∞—â–∏—Ç–∞"],
            "–°–æ—Ä–±–µ–Ω—Ç—ã –∏ –¥–µ—Ç–æ–∫—Å": ["–°–æ—Ä–±–µ–Ω—Ç", "–î–µ—Ç–æ–∫—Å", "–û—á–∏—â–µ–Ω–∏–µ"],
            "–¢—Ä–∞–≤—ã –∏ —ç–∫—Å—Ç—Ä–∞–∫—Ç—ã": ["–¢—Ä–∞–≤—ã", "–≠–∫—Å—Ç—Ä–∞–∫—Ç", "–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π"],
            "–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã": []  # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∏–ª—å—Ç—Ä–∞
        if filter_category in category_mapping:
            if product_category in category_mapping[filter_category]:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ - –≤—Ö–æ–¥–∏—Ç –ª–∏ —Ñ–∏–ª—å—Ç—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
        for main_category, sub_categories in category_mapping.items():
            if product_category == main_category and filter_category in sub_categories:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if filter_category.lower() in product_category.lower() or product_category.lower() in filter_category.lower():
            return True
        
        return False
    
    def _describe_filters(self, filters: SearchFilter) -> str:
        """–û–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        descriptions = []
        
        if filters.categories:
            descriptions.append(f"–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(filters.categories)}")
        if filters.forms:
            descriptions.append(f"—Ñ–æ—Ä–º—ã: {', '.join(filters.forms)}")
        if filters.indications:
            descriptions.append(f"–ø–æ–∫–∞–∑–∞–Ω–∏—è: {', '.join(filters.indications)}")
        if filters.properties:
            descriptions.append(f"—Å–≤–æ–π—Å—Ç–≤–∞: {', '.join(filters.properties)}")
        if filters.exclude_properties:
            descriptions.append(f"–∏—Å–∫–ª—é—á–∏—Ç—å: {', '.join(filters.exclude_properties)}")
        
        return '; '.join(descriptions) if descriptions else '–Ω–µ—Ç'
    
    def suggest_products(self, problem: str, exclude_types: List[str] = None) -> List[SearchResult]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º—ã
        filters = self._build_filters_for_problem(problem, exclude_types)
        
        return self.search(problem, filters)
    
    def _build_filters_for_problem(self, problem: str, exclude_types: List[str] = None) -> SearchFilter:
        """–°—Ç—Ä–æ–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã"""
        
        problem_lower = problem.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è
        indications = []
        if any(word in problem_lower for word in ['–ø–µ—á–µ–Ω—å', '–≥–µ–ø–∞—Ç–æ', '–¥–µ—Ç–æ–∫—Å']):
            indications.append('–ø–µ—á–µ–Ω—å')
        if any(word in problem_lower for word in ['–ø—Ä–æ—Å—Ç—É–¥–∞', '–æ—Ä–≤–∏', '–≥—Ä–∏–ø–ø']):
            indications.append('–ø—Ä–æ—Å—Ç—É–¥–∞')
        if any(word in problem_lower for word in ['–∏–º–º—É–Ω–∏—Ç–µ—Ç', '–∑–∞—â–∏—Ç–∞']):
            indications.append('–∏–º–º—É–Ω–∏—Ç–µ—Ç')
        if any(word in problem_lower for word in ['—Å—É—Å—Ç–∞–≤—ã', '–∞—Ä—Ç—Ä–∏—Ç']):
            indications.append('—Å—É—Å—Ç–∞–≤—ã')
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
        exclude_props = exclude_types if exclude_types else []
        
        return SearchFilter(
            indications=indications if indications else None,
            exclude_properties=exclude_props if exclude_props else None
        )

def test_smart_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –ø–æ–∏—Å–∫"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ú–ù–û–ì–û –ü–û–ò–°–ö–ê")
    print("="*60)
    
    search_engine = SmartSearchEngine()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    print(f"\nüîç –¢–ï–°–¢ 1: –ü–æ–∏—Å–∫ '–≤–∏—Ç–∞–º–∏–Ω –°'")
    results = search_engine.search("–≤–∏—Ç–∞–º–∏–Ω –°")
    for i, result in enumerate(results[:5], 1):
        print(f"   {i}. {result.product_name} ({result.category}) - Score: {result.score:.2f}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    print(f"\nüîç –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –≥–µ–ø–∞—Ç–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–æ–≤")
    filters = SearchFilter(categories=['–ì–µ–ø–∞—Ç–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä—ã'])
    results = search_engine.search("–ø–µ—á–µ–Ω—å", filters)
    for i, result in enumerate(results[:5], 1):
        print(f"   {i}. {result.product_name} - –°–≤–æ–π—Å—Ç–≤–∞: {', '.join(result.properties)}")
    
    # –¢–µ—Å—Ç 3: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω—Ç–∏–ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–Ω—ã—Ö –¥–ª—è –ø–µ—á–µ–Ω–∏
    print(f"\nüîç –¢–ï–°–¢ 3: –î–ª—è –ø–µ—á–µ–Ω–∏ –ë–ï–ó –∞–Ω—Ç–∏–ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–Ω—ã—Ö")
    filters = SearchFilter(
        indications=['–ø–µ—á–µ–Ω—å'],
        exclude_properties=['–∞–Ω—Ç–∏–ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–Ω—ã–π']
    )
    results = search_engine.search("–¥–ª—è –ø–µ—á–µ–Ω–∏", filters)
    for i, result in enumerate(results[:5], 1):
        print(f"   {i}. {result.product_name} ({result.category})")
    
    # –¢–µ—Å—Ç 4: –¢–æ–ª—å–∫–æ —Ç–∞–±–ª–µ—Ç–∫–∏ —Å –º–∞–≥–Ω–∏–µ–º
    print(f"\nüîç –¢–ï–°–¢ 4: –¢–∞–±–ª–µ—Ç–∫–∏ —Å –º–∞–≥–Ω–∏–µ–º")
    filters = SearchFilter(
        forms=['—Ç–∞–±–ª–µ—Ç–∫–∏'],
        components=['–º–∞–≥–Ω–∏–π']
    )
    results = search_engine.search("–º–∞–≥–Ω–∏–π", filters)
    for i, result in enumerate(results[:5], 1):
        print(f"   {i}. {result.product_name} - –§–æ—Ä–º–∞: {result.form}")
    
    # –¢–µ—Å—Ç 5: –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüîç –¢–ï–°–¢ 5: –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ—Å—Ç—É–¥–µ")
    results = search_engine.suggest_products("–ø—Ä–æ—Å—Ç—É–¥–∞")
    for i, result in enumerate(results[:5], 1):
        print(f"   {i}. {result.product_name} - –ü–æ–∫–∞–∑–∞–Ω–∏—è: {', '.join(result.indications)}")

if __name__ == "__main__":
    test_smart_search()

