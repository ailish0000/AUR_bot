"""
üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è Aurora Bot
–ü–æ–Ω–∏–º–∞–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –≤—ã—è–≤–ª—è–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import re
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from conversation_memory import ConversationMessage, UserProfile, conversation_memory
import logging

logger = logging.getLogger(__name__)

@dataclass
class ContextInsight:
    """–ò–Ω—Å–∞–π—Ç –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞"""
    insight_type: str  # 'product_focus', 'health_concern', 'synergy_interest', 'comparison_intent'
    confidence: float  # 0.0 - 1.0
    details: Dict[str, Any]
    suggested_action: str

class ContextAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        self.health_patterns = {
            '–ø–µ—á–µ–Ω—å': ['–≥–µ–ø–∞—Ç–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä', '–¥–µ—Ç–æ–∫—Å', '–æ—á–∏—â–µ–Ω–∏–µ', '—Ç–æ–∫—Å–∏–Ω—ã'],
            '–∏–º–º—É–Ω–∏—Ç–µ—Ç': ['–ø—Ä–æ—Å—Ç—É–¥–∞', '–≤–∏—Ä—É—Å', '–∑–∞—â–∏—Ç–∞', '–∞–Ω—Ç–∏–±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π'],
            '—Å–µ—Ä–¥—Ü–µ': ['–¥–∞–≤–ª–µ–Ω–∏–µ', '—Å–æ—Å—É–¥—ã', '–∫–∞—Ä–¥–∏–æ', '—Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω'],
            '–∫–æ—Å—Ç–∏': ['–æ—Å—Ç–µ–æ–ø–æ—Ä–æ–∑', '—Å—É—Å—Ç–∞–≤—ã', '–∫–∞–ª—å—Ü–∏–π', '–≤–∏—Ç–∞–º–∏–Ω –¥'],
            '–Ω–µ—Ä–≤—ã': ['—Å—Ç—Ä–µ—Å—Å', '—Å–æ–Ω', '–º–∞–≥–Ω–∏–π', '—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ'],
            '–ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ': ['–∂–µ–ª—É–¥–æ–∫', '–∫–∏—à–µ—á–Ω–∏–∫', '–º–∏–∫—Ä–æ—Ñ–ª–æ—Ä–∞', '–ø–µ—Ä–µ–≤–∞—Ä–∏–≤–∞–Ω–∏–µ']
        }
        
        self.synergy_patterns = [
            ['–º–∞–≥–Ω–∏–π', '–∫–∞–ª—å—Ü–∏–π'],
            ['–≤–∏—Ç–∞–º–∏–Ω —Å', '—Ü–∏–Ω–∫'],
            ['–æ–º–µ–≥–∞-3', '–≤–∏—Ç–∞–º–∏–Ω –µ'],
            ['–≤–∏—Ç–∞–º–∏–Ω –¥', '–∫–∞–ª—å—Ü–∏–π'],
            ['–∂–µ–ª–µ–∑–æ', '–≤–∏—Ç–∞–º–∏–Ω —Å'],
            ['–ø—Ä–æ–±–∏–æ—Ç–∏–∫–∏', '–ø—Ä–µ–±–∏–æ—Ç–∏–∫–∏']
        ]
        
        self.comparison_keywords = [
            '–ª—É—á—à–µ', '–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è', '—Ä–∞–∑–Ω–∏—Ü–∞', '—Å—Ä–∞–≤–Ω–∏—Ç—å', '–≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É',
            '—á—Ç–æ –ª—É—á—à–µ', '–∫–∞–∫–æ–π –∏–∑', '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ'
        ]
        
        self.purchase_intent_keywords = [
            '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å—Å—ã–ª–∫–∞', '–≥–¥–µ –∫—É–ø–∏—Ç—å',
            '–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–æ–ø–ª–∞—Ç–∞', '–≤ –Ω–∞–ª–∏—á–∏–∏', '—Å–∫–∏–¥–∫–∞'
        ]
        
        self.urgency_keywords = [
            '—Å—Ä–æ—á–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '—Å–µ–≥–æ–¥–Ω—è', '—Å–µ–π—á–∞—Å', '—Å–∫–æ—Ä–µ–µ'
        ]
    
    def analyze_conversation_context(self, user_id: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        context = conversation_memory.get_conversation_context(user_id, limit=15)
        profile = context.get('user_profile')
        recent_messages = context.get('recent_messages', [])
        
        if not recent_messages:
            return self._default_context()
        
        insights = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã
        insights.extend(self._analyze_health_focus(recent_messages))
        insights.extend(self._analyze_product_focus(recent_messages, profile))
        insights.extend(self._analyze_synergy_interest(recent_messages))
        insights.extend(self._analyze_comparison_intent(recent_messages))
        insights.extend(self._analyze_purchase_readiness(recent_messages, profile))
        insights.extend(self._analyze_conversation_flow(recent_messages))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_context_recommendations(insights, profile)
        
        return {
            'insights': [self._insight_to_dict(insight) for insight in insights],
            'primary_focus': self._identify_primary_focus(insights),
            'conversation_momentum': self._assess_momentum(recent_messages),
            'recommendations': recommendations,
            'next_best_action': self._determine_next_action(insights, profile)
        }
    
    def _analyze_health_focus(self, messages: List[Dict]) -> List[ContextInsight]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ–∫—É—Å –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ"""
        
        insights = []
        combined_text = ' '.join([msg['content'].lower() for msg in messages 
                                if msg['message_type'] == 'user_question'])
        
        for health_area, keywords in self.health_patterns.items():
            matches = sum(1 for keyword in keywords if keyword in combined_text)
            if matches > 0:
                confidence = min(1.0, matches * 0.3 + 0.2)
                
                insight = ContextInsight(
                    insight_type='health_concern',
                    confidence=confidence,
                    details={
                        'health_area': health_area,
                        'matched_keywords': [kw for kw in keywords if kw in combined_text],
                        'mention_count': matches
                    },
                    suggested_action=f'focus_on_{health_area}_products'
                )
                insights.append(insight)
        
        return insights
    
    def _analyze_product_focus(self, messages: List[Dict], profile: Optional[Dict]) -> List[ContextInsight]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ–∫—É—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"""
        
        insights = []
        
        if not profile:
            return insights
        
        discussed_products = profile.get('discussed_products', {})
        
        # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–æ–º–∏–Ω–∞–ª–∏—Å—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ
        for product, count in discussed_products.items():
            if count >= 2:
                confidence = min(1.0, count * 0.25)
                
                insight = ContextInsight(
                    insight_type='product_focus',
                    confidence=confidence,
                    details={
                        'product_name': product,
                        'mention_count': count,
                        'focus_level': 'high' if count >= 3 else 'medium'
                    },
                    suggested_action='provide_detailed_product_info'
                )
                insights.append(insight)
        
        return insights
    
    def _analyze_synergy_interest(self, messages: List[Dict]) -> List[ContextInsight]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–∏–Ω–µ—Ä–≥–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        
        insights = []
        combined_text = ' '.join([msg['content'].lower() for msg in messages 
                                if msg['message_type'] == 'user_question'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∏–Ω–µ—Ä–≥–∏–∏
        for synergy_pair in self.synergy_patterns:
            if all(component in combined_text for component in synergy_pair):
                confidence = 0.8
                
                insight = ContextInsight(
                    insight_type='synergy_interest',
                    confidence=confidence,
                    details={
                        'synergy_components': synergy_pair,
                        'combination_type': 'complementary'
                    },
                    suggested_action='explain_product_synergy'
                )
                insights.append(insight)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–∏–Ω–µ—Ä–≥–∏–∏
        synergy_keywords = ['–≤–º–µ—Å—Ç–µ', '—Å–æ—á–µ—Ç–∞–Ω–∏–µ', '–∫–æ–º–ø–ª–µ–∫—Å', '—Å–æ–≤–º–µ—Å—Ç–Ω–æ', '–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ']
        synergy_mentions = sum(1 for keyword in synergy_keywords if keyword in combined_text)
        
        if synergy_mentions > 0:
            confidence = min(1.0, synergy_mentions * 0.4)
            
            insight = ContextInsight(
                insight_type='synergy_interest',
                confidence=confidence,
                details={
                    'synergy_keywords_found': synergy_mentions,
                    'interest_type': 'general_combination'
                },
                suggested_action='suggest_product_combinations'
            )
            insights.append(insight)
        
        return insights
    
    def _analyze_comparison_intent(self, messages: List[Dict]) -> List[ContextInsight]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"""
        
        insights = []
        combined_text = ' '.join([msg['content'].lower() for msg in messages 
                                if msg['message_type'] == 'user_question'])
        
        comparison_mentions = sum(1 for keyword in self.comparison_keywords 
                                if keyword in combined_text)
        
        if comparison_mentions > 0:
            confidence = min(1.0, comparison_mentions * 0.5)
            
            insight = ContextInsight(
                insight_type='comparison_intent',
                confidence=confidence,
                details={
                    'comparison_signals': comparison_mentions,
                    'comparison_type': 'product_evaluation'
                },
                suggested_action='provide_product_comparison'
            )
            insights.append(insight)
        
        return insights
    
    def _analyze_purchase_readiness(self, messages: List[Dict], profile: Optional[Dict]) -> List[ContextInsight]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ"""
        
        insights = []
        combined_text = ' '.join([msg['content'].lower() for msg in messages])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–∫—É–ø–∫–∏
        purchase_mentions = sum(1 for keyword in self.purchase_intent_keywords 
                              if keyword in combined_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        urgency_mentions = sum(1 for keyword in self.urgency_keywords 
                             if keyword in combined_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Å—ã–ª–æ–∫
        link_requests = sum(1 for msg in messages 
                          if msg['message_type'] == 'product_link')
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        purchase_signals = purchase_mentions + link_requests * 2 + urgency_mentions
        
        if purchase_signals > 0:
            confidence = min(1.0, purchase_signals * 0.3)
            readiness_level = 'high' if purchase_signals >= 3 else 'medium'
            
            insight = ContextInsight(
                insight_type='purchase_readiness',
                confidence=confidence,
                details={
                    'purchase_signals': purchase_signals,
                    'link_requests': link_requests,
                    'urgency_level': urgency_mentions,
                    'readiness_level': readiness_level
                },
                suggested_action='facilitate_purchase_process'
            )
            insights.append(insight)
        
        return insights
    
    def _analyze_conversation_flow(self, messages: List[Dict]) -> List[ContextInsight]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        
        insights = []
        
        if len(messages) < 3:
            return insights
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        recent_msgs = messages[-5:]
        user_questions = [msg for msg in recent_msgs if msg['message_type'] == 'user_question']
        
        if len(user_questions) >= 3:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–≥–ª—É–±–ª—è–µ—Ç—Å—è –ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∏–ª–∏ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è
            question_lengths = [len(msg['content'].split()) for msg in user_questions]
            
            if len(question_lengths) >= 2:
                trend = 'deepening' if question_lengths[-1] > question_lengths[0] else 'broadening'
                
                insight = ContextInsight(
                    insight_type='conversation_flow',
                    confidence=0.6,
                    details={
                        'flow_trend': trend,
                        'question_complexity': 'increasing' if question_lengths[-1] > 10 else 'standard',
                        'engagement_level': len(user_questions)
                    },
                    suggested_action='adapt_detail_level'
                )
                insights.append(insight)
        
        return insights
    
    def _generate_context_recommendations(self, insights: List[ContextInsight], 
                                        profile: Optional[Dict]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        recommendations = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        insight_groups = {}
        for insight in insights:
            if insight.insight_type not in insight_groups:
                insight_groups[insight.insight_type] = []
            insight_groups[insight.insight_type].append(insight)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Å–∞–π—Ç–æ–≤
        if 'health_concern' in insight_groups:
            health_insights = insight_groups['health_concern']
            top_health = max(health_insights, key=lambda x: x.confidence)
            recommendations.append(f"–§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –¥–ª—è {top_health.details['health_area']}")
        
        if 'synergy_interest' in insight_groups:
            recommendations.append("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        if 'comparison_intent' in insight_groups:
            recommendations.append("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É")
        
        if 'purchase_readiness' in insight_groups:
            purchase_insight = insight_groups['purchase_readiness'][0]
            if purchase_insight.details['readiness_level'] == 'high':
                recommendations.append("–°–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—É –ø–æ–∫—É–ø–∫–∏")
            else:
                recommendations.append("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        
        return recommendations
    
    def _identify_primary_focus(self, insights: List[ContextInsight]) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        
        if not insights:
            return None
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Å–∞–π—Ç —Å –Ω–∞–∏–≤—ã—Å—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        primary_insight = max(insights, key=lambda x: x.confidence)
        
        if primary_insight.confidence > 0.5:
            return primary_insight.insight_type
        
        return None
    
    def _assess_momentum(self, messages: List[Dict]) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–º–µ–Ω—Ç—É–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        
        if len(messages) < 2:
            return 'starting'
        
        recent_user_msgs = [msg for msg in messages[-5:] 
                           if msg['message_type'] == 'user_question']
        
        if len(recent_user_msgs) >= 3:
            return 'high'
        elif len(recent_user_msgs) >= 1:
            return 'medium'
        else:
            return 'low'
    
    def _determine_next_action(self, insights: List[ContextInsight], 
                             profile: Optional[Dict]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–∏–ª—É—á—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        
        if not insights:
            return 'engage_conversation'
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        action_priorities = {
            'facilitate_purchase_process': 1,
            'provide_product_comparison': 2,
            'explain_product_synergy': 3,
            'focus_on_health_products': 4,
            'provide_detailed_product_info': 5
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        suggested_actions = [insight.suggested_action for insight in insights]
        
        # –í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        for action in sorted(action_priorities.keys(), key=lambda x: action_priorities[x]):
            if any(action in sa for sa in suggested_actions):
                return action
        
        return 'continue_consultation'
    
    def _default_context(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        return {
            'insights': [],
            'primary_focus': None,
            'conversation_momentum': 'starting',
            'recommendations': ['start_with_general_questions'],
            'next_best_action': 'engage_conversation'
        }
    
    def _insight_to_dict(self, insight: ContextInsight) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–Ω—Å–∞–π—Ç –≤ —Å–ª–æ–≤–∞—Ä—å"""
        
        return {
            'type': insight.insight_type,
            'confidence': insight.confidence,
            'details': insight.details,
            'suggested_action': insight.suggested_action
        }
    
    def generate_contextual_prompt(self, user_id: str, current_query: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM"""
        
        context_analysis = self.analyze_conversation_context(user_id)
        profile = conversation_memory.user_profiles.get(user_id)
        
        prompt_parts = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if profile:
            prompt_parts.append(f"–ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
            prompt_parts.append(f"- –°—Ç–∞–¥–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {profile.conversation_stage}")
            prompt_parts.append(f"- –£—Ä–æ–≤–µ–Ω—å –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: {profile.purchase_intent_level:.1f}/1.0")
            prompt_parts.append(f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {profile.total_interactions}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        primary_focus = context_analysis.get('primary_focus')
        if primary_focus:
            prompt_parts.append(f"- –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å: {primary_focus}")
        
        # –†–∞–Ω–µ–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        if profile and profile.discussed_products:
            top_products = sorted(profile.discussed_products.items(), 
                                key=lambda x: x[1], reverse=True)[:3]
            products_list = [product for product, count in top_products]
            prompt_parts.append(f"- –û–±—Å—É–∂–¥–∞–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {', '.join(products_list)}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—Ö–æ–¥—É
        recommendations = context_analysis.get('recommendations', [])
        if recommendations:
            prompt_parts.append(f"- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥: {', '.join(recommendations)}")
        
        # –°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        next_action = context_analysis.get('next_best_action')
        if next_action:
            prompt_parts.append(f"- –°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {next_action}")
        
        if prompt_parts:
            context_prompt = '\n'.join(prompt_parts)
            return f"{context_prompt}\n\n–£—á–∏—Ç—ã–≤–∞—è —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {current_query}"
        
        return current_query

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
context_analyzer = ContextAnalyzer()

