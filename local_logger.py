# local_logger.py
"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
"""
import os
import json
from datetime import datetime
from typing import Dict, List

class LocalQuestionLogger:
    def __init__(self, log_file: str = "user_questions.json"):
        self.log_file = log_file
        self.questions = self._load_existing_questions()
    
    def _load_existing_questions(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.log_file):
            try:
                with open(self.log_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
                return []
        return []
    
    def log_question(self, user_id: int, username: str, question: str) -> bool:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            question_data = {
                "timestamp": timestamp,
                "user_id": user_id,
                "username": username or "Unknown",
                "question": question
            }
            
            self.questions.append(question_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(self.log_file, 'w', encoding='utf-8') as f:
                json.dump(self.questions, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {question[:50]}...")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def get_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º"""
        if not self.questions:
            return {"total": 0, "users": 0}
        
        unique_users = len(set(q["user_id"] for q in self.questions))
        return {
            "total": len(self.questions),
            "users": unique_users,
            "latest": self.questions[-1]["timestamp"] if self.questions else None
        }
    
    def export_to_csv(self, csv_file: str = "user_questions.csv") -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ CSV —Ñ–∞–π–ª"""
        try:
            import csv
            
            with open(csv_file, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(["Timestamp", "User ID", "Username", "Question"])
                
                for q in self.questions:
                    writer.writerow([
                        q["timestamp"],
                        q["user_id"],
                        q["username"],
                        q["question"]
                    ])
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {csv_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
local_logger = LocalQuestionLogger()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
def log_user_question_local(user_id: int, username: str, question: str) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ"""
    try:
        local_logger.log_question(user_id, username, question)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_questions_statistics() -> Dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º"""
    return local_logger.get_statistics()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
def export_questions_to_csv(csv_file: str = "user_questions.csv") -> bool:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ CSV —Ñ–∞–π–ª"""
    return local_logger.export_to_csv(csv_file)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–û–ì–û –õ–û–ì–ì–ï–†–ê")
    print("=" * 40)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        (123456789, "test_user1", "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç –ø—Ä–æ—Å—Ç—É–¥—ã?"),
        (987654321, "test_user2", "–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?"),
        (555666777, "test_user3", "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø–µ—á–µ–Ω–∏")
    ]
    
    for user_id, username, question in test_questions:
        success = local_logger.log_question(user_id, username, question)
        print(f"–í–æ–ø—Ä–æ—Å '{question[:30]}...': {'‚úÖ' if success else '‚ùå'}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = local_logger.get_statistics()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total']}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}")
    print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: {stats['latest']}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
    export_success = local_logger.export_to_csv()
    print(f"   –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV: {'‚úÖ' if export_success else '‚ùå'}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")












