# product_recommendations.py
import json
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from enhanced_vector_db import enhanced_vector_db, SearchResult

@dataclass
class ProductRecommendation:
    product_id: str
    product_name: str
    url: str
    image_id: str
    description: str
    benefits: str
    dosage: str
    reason: str  # –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç

class RecommendationManager:
    def __init__(self):
        self.products_data = self._load_products_data()
    
    def _load_products_data(self) -> Dict[str, Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ knowledge_base.json"""
        try:
            with open("knowledge_base.json", "r", encoding="utf-8") as f:
                products = json.load(f)
            
            products_dict = {}
            for product in products:
                products_dict[product["id"]] = product
            
            return products_dict
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
            return {}
    
    def get_recommendations(self, query: str, limit: int = 3) -> List[ProductRecommendation]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞"""
        
        # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ
        search_results = enhanced_vector_db.search_by_use_case(query, limit=limit * 2)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
        products_relevance = {}
        
        for result in search_results:
            product_name = result.chunk.product
            if product_name not in products_relevance:
                products_relevance[product_name] = {
                    "max_score": result.score,
                    "benefits_chunks": [],
                    "description_chunks": []
                }
            
            if result.chunk.chunk_type == "benefits":
                products_relevance[product_name]["benefits_chunks"].append(result)
            elif result.chunk.chunk_type == "description":
                products_relevance[product_name]["description_chunks"].append(result)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π score
            if result.score > products_relevance[product_name]["max_score"]:
                products_relevance[product_name]["max_score"] = result.score
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        
        for product_name, data in products_relevance.items():
            # –ù–∞—Ö–æ–¥–∏–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑–µ
            product_id = None
            product_data = None
            
            for pid, pdata in self.products_data.items():
                if pdata["product"] == product_name:
                    product_id = pid
                    product_data = pdata
                    break
            
            if not product_data:
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
            short_benefits = product_data.get("short_benefits", product_data.get("benefits", []))
            benefits_text = "; ".join(short_benefits[:3])  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø—É–Ω–∫—Ç–∞
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            reason = self._generate_reason(data["benefits_chunks"], query)
            
            recommendation = ProductRecommendation(
                product_id=product_id,
                product_name=product_name,
                url=product_data.get("url", ""),
                image_id=product_data.get("image_id", ""),
                description=product_data.get("short_description", product_data.get("description", "")),
                benefits=benefits_text,
                dosage=f"{product_data.get('dosage', '')} –≤ —Ç–µ—á–µ–Ω–∏–µ {product_data.get('duration', '30 –¥–Ω–µ–π')}",
                reason=reason
            )
            
            recommendations.append(recommendation)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        recommendations.sort(key=lambda x: products_relevance[x.product_name]["max_score"], reverse=True)
        
        return recommendations[:limit]
    
    def _generate_reason(self, benefits_chunks: List[SearchResult], query: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—É, –ø–æ—á–µ–º—É –ø—Ä–æ–¥—É–∫—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç"""
        if not benefits_chunks:
            return "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"
        
        # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —á–∞–Ω–∫
        best_chunk = max(benefits_chunks, key=lambda x: x.score)
        benefits_text = best_chunk.chunk.text.replace("–ü–æ–∫–∞–∑–∞–Ω–∏—è –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é: ", "")
        
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö
        query_words = query.lower().split()
        matching_benefits = []
        
        for benefit in benefits_text.split(";"):
            benefit = benefit.strip()
            if any(word in benefit.lower() for word in query_words if len(word) > 3):
                matching_benefits.append(benefit)
        
        if matching_benefits:
            return f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω {matching_benefits[0]}"
        else:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ
            first_benefit = benefits_text.split(";")[0].strip()
            return f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω {first_benefit}"
    
    def format_recommendation_message(self, recommendation: ProductRecommendation, 
                                    current: int, total: int) -> Tuple[str, str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π"""
        
        message = f"üíä {recommendation.product_name}\n\n"
        
        # –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        message += f"üéØ –ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç: {recommendation.reason}\n\n"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        message += f"üìã –û–ø–∏—Å–∞–Ω–∏–µ:\n{recommendation.description}\n\n"
        
        # –°–ø–æ—Å–æ–± –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        message += f"üìè –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: {recommendation.dosage}\n\n"
        
        # –°—á–µ—Ç—á–∏–∫
        if total > 1:
            message += f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è {current} –∏–∑ {total}"
        
        return message, recommendation.image_id
    
    def create_recommendation_keyboard(self, user_id: int, current: int, 
                                     total: int, product_url: str):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ
        if product_url:
            buttons.append([InlineKeyboardButton(
                text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ", 
                url=product_url
            )])
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        nav_buttons = []
        if current > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", 
                callback_data=f"rec_prev_{user_id}_{current-1}"
            ))
        
        if current < total:
            nav_buttons.append(InlineKeyboardButton(
                text="–î–∞–ª—å—à–µ ‚ñ∂Ô∏è", 
                callback_data=f"rec_next_{user_id}_{current+1}"
            ))
        
        if nav_buttons:
            buttons.append(nav_buttons)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        buttons.append([
            InlineKeyboardButton(
                text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="back_to_main"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
recommendation_manager = RecommendationManager()
