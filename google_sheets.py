# google_sheets.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞
"""
import os
import asyncio
from datetime import datetime
from typing import Optional
import aiohttp
import json
from dotenv import load_dotenv

load_dotenv()

class GoogleSheetsLogger:
    def __init__(self):
        self.sheet_id = "1d9O9TOEUe0iUtN08HOBAIG_F3HV1qP5kfjHpt3gJLDc"
        self.api_key = os.getenv("GOOGLE_SHEETS_API_KEY")
        self.base_url = "https://sheets.googleapis.com/v4/spreadsheets"
        self.range_name = "–õ–∏—Å—Ç1!A:A"  # –ö–æ–ª–æ–Ω–∫–∞ A
        self.enabled = bool(self.api_key)
        
        if not self.enabled:
            print("‚ö†Ô∏è GOOGLE_SHEETS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    
    async def log_question(self, user_id: int, username: str, question: str) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google —Ç–∞–±–ª–∏—Ü—É
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            question: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        if not self.enabled:
            return False
            
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_entry = f"{timestamp} | {username or 'Unknown'} ({user_id}) | {question}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º append –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
            success = await self._append_to_sheet(log_entry)
            
            if success:
                print(f"‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets: {question[:50]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {question[:50]}...")
                
            return success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets API: {e}")
            return False
    
    async def _append_to_sheet(self, value: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º append endpoint –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü
            url = f"{self.base_url}/{self.sheet_id}/values/A1:append?valueInputOption=RAW&key={self.api_key}"
            
            data = {
                "values": [[value]]
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        return True
                    else:
                        response_text = await response.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {response.status} - {response_text}")
                        return False
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
            return False
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API"""
        if not self.enabled:
            print("‚ùå Google Sheets API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        try:
            url = f"{self.base_url}/{self.sheet_id}/values/A1?key={self.api_key}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω. –ó–∞–≥–æ–ª–æ–≤–æ–∫: {data.get('values', [['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö']])[0][0]}")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status}")
                        return False
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
google_sheets_logger = GoogleSheetsLogger()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
async def log_user_question(user_id: int, username: str, question: str) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        question: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    """
    try:
        await google_sheets_logger.log_question(user_id, username, question)
    except Exception as e:
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Google Sheets: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
async def test_google_sheets():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å Google Sheets"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GOOGLE SHEETS")
    print("=" * 30)
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_ok = await google_sheets_logger.test_connection()
    
    if connection_ok:
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
        test_question = f"–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å - {datetime.now().strftime('%H:%M:%S')}"
        success = await google_sheets_logger.log_question(
            user_id=123456789,
            username="test_user",
            question=test_question
        )
        
        if success:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏")
            
        return success
    else:
        print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return False

if __name__ == "__main__":
    # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.run(test_google_sheets())
